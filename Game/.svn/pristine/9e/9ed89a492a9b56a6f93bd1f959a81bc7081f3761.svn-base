using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;

[CustomEditor(typeof(DynamicSoundGroupCreator))]
public class DynamicSoundGroupCreatorInspector : Editor {
	public override void OnInspectorGUI() {
        EditorGUIUtility.LookLikeControls();
		
		EditorGUI.indentLevel = 1;
		var isDirty = false;
		
		DynamicSoundGroupCreator _creator = (DynamicSoundGroupCreator)target;
		
		if (_creator.logoTexture != null) {
			GUIHelper.DrawTexture(_creator.logoTexture);
		}
	
        EditorGUI.indentLevel = 0;  // Space will handle this for the header
		
		_creator.createOnAwake = EditorGUILayout.Toggle("Auto-create Groups", _creator.createOnAwake);
		if (_creator.createOnAwake) {
			GUIHelper.ShowColorWarning("*Groups will be created as soon as this object is in the Scene.");
		} else {
			GUIHelper.ShowColorWarning("*You will need to call this object's CreateGroups method.");
		}

		_creator.removeGroupsOnSceneChange = EditorGUILayout.Toggle("Auto-remove Groups", _creator.removeGroupsOnSceneChange);
		if (_creator.removeGroupsOnSceneChange) {
			GUIHelper.ShowColorWarning("*Groups will be deleted when the Scene changes.");
		} else {
			GUIHelper.ShowColorWarning("*Groups will persist across Scenes if MasterAudio does.");
		}
		
		EditorGUILayout.Separator();
		
		_creator.curDragGroupMode = (MasterAudio.DragGroupMode) EditorGUILayout.EnumPopup("Bulk Creation Mode", _creator.curDragGroupMode);
		_creator.bulkVariationMode = (SoundGroupVariation.AudioLocation) EditorGUILayout.EnumPopup("Variation Mode", _creator.bulkVariationMode);
		
		// create groups start
		EditorGUILayout.BeginVertical();
		var aEvent = Event.current;

		GUI.color = Color.yellow;
		
		var dragAreaGroup = GUILayoutUtility.GetRect(0f,35f,GUILayout.ExpandWidth(true));
		GUI.Box (dragAreaGroup, "Drag Audio clips here to create groups!");

		GUI.color = Color.white;
		
		switch (aEvent.type) {
			case EventType.DragUpdated:
			case EventType.DragPerform:
				if(!dragAreaGroup.Contains(aEvent.mousePosition)) {
					break;
				}
				
				DragAndDrop.visualMode = DragAndDropVisualMode.Copy;
				
				if(aEvent.type == EventType.DragPerform) {
					DragAndDrop.AcceptDrag();
					
					DynamicSoundGroupInfo groupInfo = null;
				
					var clips = new List<AudioClip>();
				
					foreach (var dragged in DragAndDrop.objectReferences) {
						var aClip = dragged as AudioClip;
						if(aClip == null) {
							continue;
						}
						
						clips.Add(aClip);
					}
				
					clips.Sort(delegate(AudioClip x, AudioClip y) {
						return x.name.CompareTo(y.name);
					});
				
					for (var i = 0; i < clips.Count; i++) {
						var aClip = clips[i];
						if (_creator.curDragGroupMode == MasterAudio.DragGroupMode.OneGroupPerClip) {
							CreateGroup(_creator, aClip);
						} else {
							if (groupInfo == null) { // one group with variations
								groupInfo = CreateGroup(_creator, aClip);
							} else {
								CreateVariation(_creator, groupInfo, aClip);
							}
						}
					
						isDirty = true;
					}
				}
				Event.current.Use();
				break;
		}
		EditorGUILayout.EndVertical();
		// create groups end
		
		EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
        _creator.soundGroupsAreExpanded = GUIHelper.Foldout(_creator.soundGroupsAreExpanded, "Dynamic Sound Groups");

		EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
		GUIContent content;
        var collapseIcon = '\u2261'.ToString();
        content = new GUIContent(collapseIcon, "Click to collapse all");
        var masterCollapse = GUILayout.Button(content, EditorStyles.toolbarButton);

        var expandIcon = '\u25A1'.ToString();
        content = new GUIContent(expandIcon, "Click to expand all");
        var masterExpand = GUILayout.Button(content, EditorStyles.toolbarButton);
		if (masterExpand) {
			ExpandCollapseAllSoundGroups(_creator, true);
		} 
		if (masterCollapse) {
			ExpandCollapseAllSoundGroups(_creator, false);
		}
        EditorGUILayout.EndHorizontal();
		EditorGUILayout.EndHorizontal();
		
		DynamicSoundGroupVariation aVar;

		if (_creator.soundGroupsAreExpanded) {
			int? addGroupIndex = null;
			int? removeGroupIndex = null;
			int? addVariationIndex = null;
			int? removeVariationIndex = null;
			int? variationIndextoShiftUp = null;
			int? variationIndextoShiftDown = null;
			
			for (var i = 0; i < _creator.soundGroupsToCreate.Count; i++) {
				EditorGUILayout.Separator();
				var aGroup = _creator.soundGroupsToCreate[i];
				
		        EditorGUI.indentLevel = 1;  // Space will handle this for the header
				EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
		        
				aGroup.isExpanded = GUIHelper.Foldout(aGroup.isExpanded, "GROUP: " + aGroup.groupName);
			
				EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));

				var groupButtonPressed = GUIHelper.AddFoldOutListItemButtons(i, _creator.soundGroupsToCreate.Count, "Sound Group", false, false);
				EditorGUILayout.EndHorizontal();
				EditorGUILayout.EndHorizontal();
				
				if (aGroup.isExpanded) {
			        EditorGUI.indentLevel = 0;  // Space will handle this for the header
					aGroup.groupSettingsExpanded = EditorGUILayout.Toggle("Show Group Settings", aGroup.groupSettingsExpanded);
					if (aGroup.groupSettingsExpanded) {
						aGroup.groupName = EditorGUILayout.TextField("Group Name", aGroup.groupName);
						
						aGroup.groupMasterVolume = EditorGUILayout.Slider("Group Master Volume", aGroup.groupMasterVolume, 0f, 1f);
						aGroup.retriggerPercentage = EditorGUILayout.IntSlider("Never Interrupt Clips", aGroup.retriggerPercentage, 0, 100);
						aGroup.duckSound = EditorGUILayout.Toggle("Duck Music?", aGroup.duckSound);
	
						aGroup.limitPolyphony = EditorGUILayout.Toggle("Limit Polyphony", aGroup.limitPolyphony);
						if (aGroup.limitPolyphony) {
							int maxVoices = 0;
							for (var j = 0; j < aGroup.variations.Count; j++) {
								var variation = aGroup.variations[j];
								maxVoices += variation.weight;
							}
							
							aGroup.voiceLimitCount = EditorGUILayout.IntSlider("Polyphony Voice Limit", aGroup.voiceLimitCount, 1, maxVoices);
						}
						
						aGroup.limitMode = (MasterAudioGroup.LimitMode) EditorGUILayout.EnumPopup("Replay Limit Mode", aGroup.limitMode);
						switch (aGroup.limitMode) {
							case MasterAudioGroup.LimitMode.FrameBased:
								aGroup.limitPerXFrames = EditorGUILayout.IntSlider("Min Frames Between", aGroup.limitPerXFrames, 1, 120);
								break;
							case MasterAudioGroup.LimitMode.TimeBased:
								aGroup.minimumTimeBetween = EditorGUILayout.Slider("Min Seconds Between", aGroup.minimumTimeBetween, 0.1f, 10f);
								break;
						}
						
						aGroup.busMode = (DynamicSoundGroupInfo.BusMode) EditorGUILayout.EnumPopup("Bus Mode", aGroup.busMode);
						if (aGroup.busMode != DynamicSoundGroupInfo.BusMode.NoBus) {
							aGroup.busName = EditorGUILayout.TextField("Bus Name", aGroup.busName);
							GUIHelper.ShowColorWarning("*Bus will be created if it does not exist.");
						}
						 
						EditorGUILayout.BeginHorizontal();
						GUILayout.Label("Actions", EditorStyles.wordWrappedLabel, GUILayout.Width(50f));
						GUILayout.Space(87);
						GUI.contentColor = Color.green;
						if (GUILayout.Button(new GUIContent("Equalize Weights", "Reset Weights to zero"), EditorStyles.toolbarButton, GUILayout.Width(120))) {
							isDirty = true;
							EqualizeWeights(aGroup);
						}	
						
						GUILayout.Space(8);
						GUI.contentColor = Color.green;
						if (GUILayout.Button(new GUIContent("Alpha Sort Variations", "Sort Variations by name"), EditorStyles.toolbarButton, GUILayout.Width(120))) {
							isDirty = true;
							AlphaSortVariations(aGroup);
						}	
						
						GUI.contentColor = Color.white;
						EditorGUILayout.EndHorizontal();
						EditorGUILayout.Separator();
					}
					
					// create variations start
					EditorGUILayout.BeginVertical();
					var anEvent = Event.current;
		
					GUI.color = Color.yellow;
					
					var dragArea = GUILayoutUtility.GetRect(0f,35f,GUILayout.ExpandWidth(true));
					GUI.Box (dragArea, "Drag Audio clips here to create variations!");
		
					GUI.color = Color.white;
					
					switch (anEvent.type) {
						case EventType.DragUpdated:
						case EventType.DragPerform:
							if(!dragArea.Contains(anEvent.mousePosition)) {
								break;
							}
							
							DragAndDrop.visualMode = DragAndDropVisualMode.Copy;
							
							if(anEvent.type == EventType.DragPerform) {
								DragAndDrop.AcceptDrag();

								var clips = new List<AudioClip>();	
							
								foreach (var dragged in DragAndDrop.objectReferences) {
									var aClip = dragged as AudioClip;
									if(aClip == null) {
										continue;
									}
								
									clips.Add(aClip);									
								}
							
								clips.Sort(delegate(AudioClip x, AudioClip y) {
									return x.name.CompareTo(y.name);
								});
							
								for (var j = 0; j < clips.Count; j++) {
									var aClip = clips[j];
			
									CreateVariation(_creator, aGroup, aClip);
									isDirty = true;
											
								}
							}
							Event.current.Use();
							break;
					}
					EditorGUILayout.EndVertical();
					// create variations end
					
					if (aGroup.variations.Count == 0) {
						GUIHelper.ShowColorWarning("This Group has zero variations.");
					} else {
						for (var v = 0; v < aGroup.variations.Count; v++) {
					        EditorGUI.indentLevel = 2;  // Space will handle this for the header
							EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
					        
							aVar = aGroup.variations[v];
							aVar.isExpanded = GUIHelper.Foldout(aVar.isExpanded, aVar.clipName);
						
							EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
			
							var variationButtonPressed = GUIHelper.AddFoldOutListItemButtons(v, aGroup.variations.Count, "variation", false, true);
							EditorGUILayout.EndHorizontal();
							EditorGUILayout.EndHorizontal();
							if (aVar.isExpanded) {
						        EditorGUI.indentLevel = 0;  // Space will handle this for the header
								
								var oldLocation = aVar.audLocation;
								
								aVar.audLocation = (SoundGroupVariation.AudioLocation) EditorGUILayout.EnumPopup("Audio Origin", aVar.audLocation);
								
								switch (aVar.audLocation) {
									case SoundGroupVariation.AudioLocation.Clip:
										aVar.clip = (AudioClip) EditorGUILayout.ObjectField("Audio Clip", aVar.clip, typeof(AudioClip), false);
										break;
									case SoundGroupVariation.AudioLocation.ResourceFile:
										if (oldLocation != aVar.audLocation) {
											if (aVar.clip != null) {
												Debug.Log("Audio clip removed to prevent unnecessary memory usage on Resource file variation.");
											}
											aVar.clip = null;
										}

										EditorGUILayout.BeginVertical();
										var myEvent = Event.current;
									
										GUI.color = Color.yellow;
										var myDragArea = GUILayoutUtility.GetRect(0f, 20f,GUILayout.ExpandWidth(true));
										GUI.Box (myDragArea, "Drag Resource Audio clip here to use its name!");
										GUI.color = Color.white;
										
										switch (myEvent.type) {
											case EventType.DragUpdated:
											case EventType.DragPerform:
												if(!myDragArea.Contains(myEvent.mousePosition)) {
													break;
												}
												
												DragAndDrop.visualMode = DragAndDropVisualMode.Copy;
												
												if(myEvent.type == EventType.DragPerform) {
													DragAndDrop.AcceptDrag();
													
													foreach (var dragged in DragAndDrop.objectReferences) {
														var aClip = dragged as AudioClip;
														if(aClip == null) {
															continue;
														}
														
														aVar.resourceFileName = aClip.name;
													}
												}
												Event.current.Use();
												break;
										}
										EditorGUILayout.EndVertical();
									
										aVar.resourceFileName = EditorGUILayout.TextField("Resource Filename", aVar.resourceFileName);
										break;
								}
								
								aVar.volume = EditorGUILayout.Slider("Volume", aVar.volume, 0f, 1f);
								aVar.pitch = EditorGUILayout.Slider("Pitch", aVar.pitch, -3f, 3f);
								aVar.clipName = EditorGUILayout.TextField("Variation Name", aVar.clipName);
								aVar.loopClip = EditorGUILayout.Toggle("Loop Clip", aVar.loopClip);
								aVar.randomPitch = EditorGUILayout.Slider("Random Pitch", aVar.randomPitch, 0f, 3f);
								aVar.randomVolume = EditorGUILayout.Slider("Random Volume", aVar.randomVolume, 0f, 1f);
								aVar.weight = EditorGUILayout.IntSlider("Weight (Instances)", aVar.weight, 0, 100);
								
								aVar.useFades = EditorGUILayout.Toggle("Use Custom Fading?", aVar.useFades);
								if (aVar.useFades) {
							        EditorGUI.indentLevel = 1;  // Space will handle this for the header
									aVar.fadeInTime = EditorGUILayout.Slider("Fade In Time (sec)", aVar.fadeInTime, 0f, 10f);
									aVar.fadeOutTime = EditorGUILayout.Slider("Fade Out time (sec)", aVar.fadeOutTime, 0f, 10f);
								}

								EditorGUI.indentLevel = 0;  // Space will handle this for the header
								aVar.showAudio3DSettings = EditorGUILayout.Toggle("Use 3D Settings?", aVar.showAudio3DSettings);
								if (aVar.showAudio3DSettings) {
							        EditorGUI.indentLevel = 1;  // Space will handle this for the header
									
									aVar.audDopplerLevel = EditorGUILayout.Slider("Doppler Level", aVar.audDopplerLevel, 0f, 5f);
									aVar.audRollOffMode = (AudioRolloffMode) EditorGUILayout.EnumPopup("Volume Rolloff", aVar.audRollOffMode);
									aVar.audMinDistance = EditorGUILayout.FloatField("Min Distance", aVar.audMinDistance);
									aVar.audSpread = EditorGUILayout.Slider("Spread", aVar.audSpread, 0f, 360f);
									aVar.audMaxDistance = EditorGUILayout.FloatField("Max Distance", aVar.audMaxDistance);

									if (_creator.audio == null) {
										GUIHelper.ShowColorWarning("*You have no Audio Source in this prefab. Please delete prefab.");
										GUIHelper.ShowColorWarning(" Then add a new Dyanmic SGC from the Audio Manager window.");
									} else {
										EditorGUILayout.BeginHorizontal();
										//GUILayout.Label("Actions", EditorStyles.wordWrappedLabel, GUILayout.Width(50f));
										GUILayout.Space(15);
										GUI.contentColor = Color.green;
										if (GUILayout.Button(new GUIContent("Copy 3D to Audio Source", "Copy the 3D settings to the Audio Source in this prefab for using the Unity widgets."), EditorStyles.toolbarButton, GUILayout.Width(160))) {
											isDirty = true;
											Copy3DSettingsToAudioSource(_creator.audio, aVar);
										}	
	
										GUILayout.Space(10);
										
										if (GUILayout.Button(new GUIContent("Copy 3D from Audio Source", "Copy the 3D settings from the Audio Source in this prefab back into this section."), EditorStyles.toolbarButton, GUILayout.Width(160))) {
											isDirty = true;
											Copy3DSettingsFromAudioSource(_creator.audio, aVar);
										}
										GUI.contentColor = Color.white;
										EditorGUILayout.EndHorizontal();
									}
								}
							}
							
							switch (variationButtonPressed) {
								case GUIHelper.DTFunctionButtons.Add:
									addVariationIndex = v;
									break;
								case GUIHelper.DTFunctionButtons.Remove:
									removeVariationIndex = v;
									break;
								case GUIHelper.DTFunctionButtons.ShiftUp:
									variationIndextoShiftUp = v;	
									break;
								case GUIHelper.DTFunctionButtons.ShiftDown:
									variationIndextoShiftDown = v;	
									break;
							}
						}
					}
				}
				
				if (addVariationIndex.HasValue) {
					var newVar = new DynamicSoundGroupVariation();
					aGroup.variations.Insert(addVariationIndex.Value + 1, newVar);
				} else if (removeVariationIndex.HasValue) {
					aGroup.variations.RemoveAt(removeVariationIndex.Value); 
				} else if (variationIndextoShiftUp.HasValue) {
					var item = aGroup.variations[variationIndextoShiftUp.Value];
					aGroup.variations.Insert(variationIndextoShiftUp.Value - 1, item);
					aGroup.variations.RemoveAt(variationIndextoShiftUp.Value + 1);
				} else if (variationIndextoShiftDown.HasValue) {
					var index = variationIndextoShiftDown.Value + 1;
	
					var item = aGroup.variations[index];
					aGroup.variations.Insert(index - 1, item);
					aGroup.variations.RemoveAt(index + 1);
				}
				
				switch (groupButtonPressed) {
					case GUIHelper.DTFunctionButtons.Add:
						addGroupIndex = i;
						break;
					case GUIHelper.DTFunctionButtons.Remove:
						removeGroupIndex = i;
						break;
				}

				EditorGUILayout.Separator();
			}
			
			if (addGroupIndex.HasValue) {
				var newGroup = new DynamicSoundGroupInfo();
				_creator.soundGroupsToCreate.Insert(addGroupIndex.Value + 1, newGroup);
			} else if (removeGroupIndex.HasValue) {
				if (_creator.soundGroupsToCreate.Count <= 1) {
					GUIHelper.ShowAlert("You cannot delete the last new Sound Group. You can delete the prefab if you don't need any.");
				} else {
					_creator.soundGroupsToCreate.RemoveAt(removeGroupIndex.Value); 
				}
			}	
		}
		
		if (GUI.changed || isDirty) {
			EditorUtility.SetDirty(target);
		}
		
		//DrawDefaultInspector();
    }
	
	private void CreateVariation(DynamicSoundGroupCreator _creator, DynamicSoundGroupInfo aGroup, AudioClip aClip) {
		var clipName = UtilStrings.TrimSpace(aClip.name);
		
		var matchingVar = aGroup.variations.Find(delegate(DynamicSoundGroupVariation obj) {
			return obj.clipName == aClip.name;
		});
		
		if (matchingVar != null) {
			GUIHelper.ShowAlert("You already have a variation for this Group named '" + clipName + "'. \n\nPlease rename these variations when finished to be unique, or you may not be able to play them by name if you have a need to.");
		}

		var newVar = new DynamicSoundGroupVariation() {
			clipName = clipName
		};
		
		if (_creator.bulkVariationMode == SoundGroupVariation.AudioLocation.ResourceFile) {
			newVar.audLocation = SoundGroupVariation.AudioLocation.ResourceFile;
			newVar.resourceFileName = clipName;
		} else {
			newVar.clip = aClip;
		}
		
		aGroup.variations.Add(newVar);
		
		if (aGroup.groupName == DynamicSoundGroupInfo.NEW_GROUP_START_NAME) {
			aGroup.groupName = clipName;
		}
	}

	private DynamicSoundGroupInfo CreateGroup(DynamicSoundGroupCreator creator, AudioClip aClip) {
		var groupName = UtilStrings.TrimSpace(aClip.name);
		
		var matchingGroup = creator.soundGroupsToCreate.Find(delegate(DynamicSoundGroupInfo obj) {
			return obj.groupName == groupName;
		});
		
		if (matchingGroup != null) {
			GUIHelper.ShowAlert("You already have a Group named '" + groupName + "'. \n\nPlease rename this Group when finished to be unique.");
		}

		var newGroup = new DynamicSoundGroupInfo() {
			groupName = groupName
		};

		creator.soundGroupsToCreate.Add(newGroup);
		CreateVariation(creator, newGroup, aClip);
		
		return newGroup;
	}
	
	private void ExpandCollapseAllSoundGroups(DynamicSoundGroupCreator _creator, bool shouldExpand) {
		DynamicSoundGroupInfo aGroup = null;
		
		for (var i = 0; i < _creator.soundGroupsToCreate.Count; i++) {
			aGroup = _creator.soundGroupsToCreate[i];
			aGroup.isExpanded = shouldExpand;
			
			for (var v = 0; v < aGroup.variations.Count; v++) {
				aGroup.variations[v].isExpanded = shouldExpand;
			}
		}
	}
	
	public void EqualizeWeights(DynamicSoundGroupInfo _group) {
		foreach (var variation in _group.variations) {
			variation.weight = 1;
		}
	}
	
	public void AlphaSortVariations(DynamicSoundGroupInfo _group) {
		_group.variations.Sort(delegate(DynamicSoundGroupVariation x, DynamicSoundGroupVariation y) {
			return x.clipName.CompareTo(y.clipName);
		});
	}
	
	private void Copy3DSettingsToAudioSource(AudioSource aSource, DynamicSoundGroupVariation aVar) {
		aSource.dopplerLevel = aVar.audDopplerLevel;
		aSource.rolloffMode = aVar.audRollOffMode;
		aSource.minDistance = aVar.audMinDistance;
		aSource.spread = aVar.audSpread;
		aSource.maxDistance = aVar.audMaxDistance;
		Debug.Log("3D Settings copied from variation '" + aVar.clipName + "' to Audio Source.");
	}
	
	private void Copy3DSettingsFromAudioSource(AudioSource aSource, DynamicSoundGroupVariation aVar) {
		aVar.audDopplerLevel = aSource.dopplerLevel;
		aVar.audRollOffMode = aSource.rolloffMode;
		aVar.audMinDistance = aSource.minDistance;
		aVar.audSpread = aSource.spread;
		aVar.audMaxDistance = aSource.maxDistance;
		Debug.Log("3D Settings copied from Audio Source to variation '" + aVar.clipName + "'.");
	}
}
