using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Vectrosity;

public class Port : MonoBehaviour
{
	public GameObject[] shipPrefabs;
	public AudioClip _readyClip;
	
	Camera _gameCamera;
	TimeKeeper _keeper;
	
	Path2 currentPath;
	
	Vector2 currentPositionScreen;
	Vector3 currentPositionWorld;
	
	VectorLine currentLine = null;
	public Material lineMaterial;
	
	float timeSinceLastMovement = 0.0f;
	
	public float timeBetweenDeploy = 3.0f;
	public float distanceBetweenPoints = 40.0f;
	float lastDeploy = 0.0f;
	
	public bool minionReady = true;
	public bool portReady = true;
	bool enabled = false;
	
	public GameObject portWorld;
	public GameObject portedMinion = null;
	public Vector3 portDirection;

	public Vector2 nesPortOffset;
	public Vector2 msPortOffset;
	public Vector2 latestPortOffset;

	public bool disableOnStart = true;
	
	public int portNumber;
	
	MothershipVehicle mothership = null;
	
	int maxPathNodes = 30;
	
	public exSprite _sprite;
	public exSpriteAnimation _animation;
	
	public exSpriteAnimClip prepareAnimationName;
	public exSpriteAnimClip readyAnimationName;

	public PortState portState = new PortState();
	private int currentType = 0;

	ColliderOutline2D _outline;

	void Awake() {
		_gameCamera = Camera.main;
		_sprite = transform.parent.GetComponent<exSprite>();
		_outline = GetComponent<ColliderOutline2D>();

		_keeper = GameObject.Find("TimeKeeper").GetComponent<TimeKeeper>();
		
		GameObject go = GameObject.Find("Mothership");
		if (go != null) {
			mothership = go.GetComponent<MothershipVehicle>();
		}
		lastDeploy = timeBetweenDeploy;

		portState.portIndex = portNumber;
		portState.details = new PortState.MinionTypeDetails[(int)PortState.MinionTypes.COUNT];
		for (int i = 0; i < portState.details.Length; i++) {
			portState.details[i] = detailsForMinionType((PortState.MinionTypes)i);
		}

		EasyTouch.On_TouchStart += OnTouchStartBroadcast;
	}
	
	void Start() {
		PortMinion();
		SetEnable(!disableOnStart);

		if (mothership != null) {
			//Messenger.Broadcast("OnPortLoadoutUpdate", portState, true);
			Messenger.Broadcast("OnPortInit", portState, _outline);
		}
	}
	
	void PortMinion() {
		if (shipPrefabs.Length == 0) return;

		GameObject prefab = shipPrefabs[Random.Range(0, shipPrefabs.Length-1)];

		Vector3 minionPosition = portWorld.transform.position; minionPosition.z = mothership == null ? minionPosition.z : LayerManager._2;
		portedMinion = (GameObject) Instantiate(prefab, minionPosition, prefab.transform.rotation);
		
		portedMinion.transform.forward = portDirection;
		MinionBaseVehicle vehicle = portedMinion.GetComponent<MinionBaseVehicle> ();
		vehicle.parentPort = this;
		vehicle.portIndex = portNumber;
		vehicle.OnPortChange(enabled);

		PortState.MinionTypeDetails dets = portState.details[portState.selectedType];
		portedMinion.GetComponent<MinionTypeBase>().SetLevelDetails(dets.levels[dets.state]);
		
		if (mothership != null) {
			portedMinion.transform.parent = mothership.transform;
		}
	}
	
	Color[] buildColorSmooth(int lines) {
		Color[] colors = new Color[currentPath.points.Count - 1];
		
		for (int i = 0; i < currentPath.points.Count - 1; i++) {
			Color white = Color.white;
			white.a = 1.0f - ( (i+1)/((float) lines));
			colors[i] = white;
		}
		
		return colors;
	}

	public void OnUpdatePort(int type, int level) {
		List<GameObject> prefabs = new List<GameObject>();
		bool gotone = false;
		for (int i = 0; i < portState.details.Length; i++) {
			if (i == type) {
				PortState.MinionTypeDetails details = portState.details[i];
				if (details.state + 1 >= details.levels.Length) {
					break;
				}

				float cost = 0.0f;
				if (level == details.state + 1) {
					cost = details.levels[details.state + 1].cost;
				}
				else {
					cost = details.levels[level-1].cost + details.levels[level].cost;
				}

				float lastCost = portState.GetCurrentLevelDetails().cost;
				if (cost <= mothership.GetScrap()) {
					portState.details[i].state = level;
					portState.selectedType = i;

					if (cost == 0) {
						mothership.AddScrap(Mathf.FloorToInt(lastCost * 0.5f));
					}

					prefabs.Add((GameObject) Resources.Load("_MinionTypes/"+i.ToString()));
					mothership.RemoveScrap(cost);
					currentType = i;
					gotone = true;
				}
				break;
			}
		}

		if (gotone) {
			for (int i = 0; i < portState.details.Length; i++) {
				if (i != type) {
					portState.details[i].state = -1;
				}
			}

			shipPrefabs = prefabs.ToArray();
			if (portedMinion != null) {
				portedMinion.GetComponent<MinionPhysicsVehicle>().CleaupAndDestroy(Vector3.zero, false);
			}

			PortMinion();
			lastDeploy = timeBetweenDeploy;
			UpdateAnimation();
		}

		Messenger.Broadcast("onPortLoadoutUpdate", portState, gotone);

	}

	void OnDestroy(){
		UnsubscribeEvent();
		EasyTouch.On_TouchStart -= OnTouchStartBroadcast;
	}

	void UnsubscribeEvent() {
		EasyTouch.On_TouchStart -= OnTouchStartET;
		EasyTouch.On_TouchUp -= OnTouchEndET;
		EasyTouch.On_Drag -= OnTouchDragET;
	}

	void OnTouchStartBroadcast(Gesture gesture) {
		if (gesture.pickObject == gameObject) {
			Messenger.Broadcast("OnPortSelected", portNumber, portWorld.transform.position);
		}
	}

	void OnTouchStartET(Gesture gesture) {
		if (gesture.pickObject == gameObject){
			if (portReady && minionReady) {
				Time.timeScale = 0.01f;
				currentPath = gameObject.AddComponent<Path2>();
				
				currentPositionScreen = UICamera.lastTouchPosition;
				currentPositionWorld = portedMinion.transform.position;//_gameCamera.ScreenToWorldPoint(new Vector3(currentPositionScreen.x, currentPositionScreen.y, _gameCamera.transform.position.z));
				currentPositionWorld.z = mothership == null ? transform.position.z : LayerManager._3;

				currentPath.AddPoint(new TimestampPoint(currentPositionWorld, 0.0f));
				
				timeSinceLastMovement = 0.0f;
				lastDeploy = 0.0f;
			}
		}
	}

	private void OnTouchDragET(Gesture gesture) {
		if (currentPath) {
			Vector2 currentTouch = UICamera.lastTouchPosition;
			
			if (Vector2.Distance(currentTouch, currentPositionScreen) > distanceBetweenPoints) { 
				Vector2 dir = (currentTouch - currentPositionScreen).normalized;
				currentPositionScreen = currentPositionScreen + (dir * distanceBetweenPoints);//UICamera.lastTouchPosition;
				Vector3 world = _gameCamera.ScreenToWorldPoint(new Vector3(currentPositionScreen.x, currentPositionScreen.y, _gameCamera.transform.position.z));	
				world.z = mothership == null ? transform.position.z : LayerManager._3;
				
				currentPath.AddPoint(new TimestampPoint(world, timeSinceLastMovement));
				timeSinceLastMovement = 0.0f; 
				currentPositionWorld = world;
				
				if (currentLine == null) {
					currentLine = new VectorLine("Test", currentPath.GetPoints(), lineMaterial, 10.0f, LineType.Continuous);
				}
				
				currentLine.Resize(currentPath.GetPoints());
				currentLine.SetColorsSmooth(buildColorSmooth(maxPathNodes));
				currentLine.Draw3D ();
				
				if (currentPath.points.Count >= maxPathNodes) {
					EndPath();	
				}
			}
		}
	}

	void OnTouchEndET(Gesture gesture) {
		if (GameState.Instance.IsPaused() == false) {
			EndPath ();
		}
	}

	void EndPath() {
		if (shipPrefabs != null && shipPrefabs.Length > 0) {
			if (currentPath != null) {
				if (currentPath.points.Count > 1) {
					MinionBaseVehicle minion = portedMinion.GetComponent<MinionBaseVehicle>();
					minion.parentPort = this;
					minion.SetPath(currentPath);
					
					minionReady = false;
					
					minion.transform.forward = Vector3.right * -1.0f;
					
					portedMinion = null;
				}
				else {
					lastDeploy = timeBetweenDeploy;	
				}
				
				Destroy (currentPath);
				VectorLine.Destroy(ref currentLine);
				currentLine = null;
				currentPath = null;
			}
		}
		Time.timeScale = 1.0f;
	}
				
	void Update() {
		timeSinceLastMovement += _keeper.AnimationTime();
		
		if (minionReady) {
			lastDeploy += Time.deltaTime;
			if (lastDeploy >= timeBetweenDeploy) {
				if (portReady == false) {
					MasterAudio.PlaySound(_readyClip.name);
				}
				if (portedMinion == null) {
					PortMinion();
				}
				portReady = true;
			}
			else {
				portReady = false;	
			}
		}
		UpdateAnimation();

	}

	void UpdateAnimation() {
		if (_animation) {
			if (!portReady) {
				float progress = lastDeploy/timeBetweenDeploy;
				int frame = Mathf.FloorToInt(progress * 4.0f);
				
				_animation.Pause();
				_animation.SetFrame(prepareAnimationName.name, frame);
			}
			else {
				if (!_animation.IsPlaying(readyAnimationName.name) || _animation.IsPaused(readyAnimationName.name)) {
					_animation.Play (readyAnimationName.name);
				}
			}
		}
	}
	
	public void MinionDestroyed() {
		minionReady = true;
	}
	
	public void SetEnable(bool enable) {
		enabled = enable;
		if (enable) {
			EasyTouch.On_TouchStart += OnTouchStartET;
			EasyTouch.On_TouchUp += OnTouchEndET;
			EasyTouch.On_Drag += OnTouchDragET;
			
			if (_sprite != null) {
				_sprite.color = Color.white;
			}
			
			if (portedMinion != null) {
				portedMinion.collider.enabled = true;
				MinionBaseVehicle vehicle = portedMinion.GetComponent<MinionBaseVehicle>();
				vehicle.OnPortChange(true);
			}
		}
		else {
			if (portedMinion != null) {
				portedMinion.collider.enabled = false;
				MinionBaseVehicle vehicle = portedMinion.GetComponent<MinionBaseVehicle>();
				vehicle.OnPortChange(false);
				
				if (currentPath) {
					Destroy (currentPath);
					VectorLine.Destroy(ref currentLine);
					currentLine = null;
					currentPath = null;
					lastDeploy = timeBetweenDeploy;	
					Time.timeScale = 1.0f;
				}
			}

			if (_sprite != null) {
				_sprite.color = Color.red;
			}
			
			if (_animation != null) {
				_animation.Stop();
				_animation.SetFrame(prepareAnimationName.name, 5);
			}

			UnsubscribeEvent();
		}
	}
	
	void OnDrawGizmosSelected() {
		Debug.DrawLine(transform.position, transform.position + (portDirection * 100.0f));	
	}

	PortState.MinionTypeDetails detailsForMinionType(PortState.MinionTypes type) {
		PortState.MinionTypeDetails dets = new PortState.MinionTypeDetails();
		dets.index = (int) type;

		if (type == PortState.MinionTypes.NORMAL_MINION) {
			dets.state = 0;

			dets.levels = new PortState.MinionTypeLevelDetail[1];
			dets.levels[0].damage = 1.0f;
			dets.levels[0].cost = 0.0f;
			dets.levels[0].speed = 1.0f;
			dets.levels[0].life = 1.0f;
			dets.levels[0].index = 0;

			dets.title = "Normal";
			dets.description = "Deals one damage to anything it collides with, then promptly dies.";
			dets.upgradeType = PortState.MinionUpgradeType.SINGLE_LEVEL;
		}
		else if (type == PortState.MinionTypes.SPEED_MINION) {
			dets.state = -1;

			dets.levels = new PortState.MinionTypeLevelDetail[3];
			dets.levels[0].damage = 0.5f;
			dets.levels[0].speed = 1.5f;
			dets.levels[0].cost = 4.0f;
			dets.levels[0].life = 1.0f;
			dets.levels[0].index = 0;

			dets.levels[1].damage = 0.75f;
			dets.levels[1].speed = 2.0f;
			dets.levels[1].cost = 4.0f;
			dets.levels[1].life = 1.0f;
			dets.levels[1].index = 1;

			dets.levels[2].damage = 1.0f;
			dets.levels[2].speed = 2.5f;
			dets.levels[2].cost = 4.0f;
			dets.levels[2].life = 1.0f;
			dets.levels[2].index = 2;

			dets.title = "Speed";
			dets.description = "Increases travel speed of minion.";
			dets.upgradeType = PortState.MinionUpgradeType.LEVEL_MINION;
		}
		else if ( type == PortState.MinionTypes.SPLIT_MINION) {
			dets.state = -1;

			dets.levels = new PortState.MinionTypeLevelDetail[3];
			dets.levels[0].damage = 0.33f;
			dets.levels[0].cost = 4.0f;
			dets.levels[0].speed = 1.0f;
			dets.levels[0].life = 1.0f;
			dets.levels[0].index = 0;

			dets.levels[1].damage = 0.44f;
			dets.levels[1].cost = 4.0f;
			dets.levels[1].speed = 1.0f;
			dets.levels[1].life = 1.0f;
			dets.levels[1].index = 1;

			dets.levels[2].damage = 0.55f;
			dets.levels[2].cost = 4.0f;
			dets.levels[2].speed = 1.0f;
			dets.levels[2].life = 1.0f;
			dets.levels[2].index = 2;

			dets.title = "Split";
			dets.description = "Splits into three pieces at the end of its path, destroying any projectiles they collide with.";
			dets.upgradeType = PortState.MinionUpgradeType.LEVEL_MINION;
		}
		else if ( type == PortState.MinionTypes.SEEKER_MINION) {
			dets.state = -1;

			dets.levels = new PortState.MinionTypeLevelDetail[3];
			dets.levels[0].damage = 0.75f;
			dets.levels[0].cost = 4.0f;
			dets.levels[0].speed = 1.0f;
			dets.levels[0].life = 1.0f;
			dets.levels[0].index = 0;
			
			dets.levels[1].damage = 0.85f;
			dets.levels[1].cost = 4.0f;
			dets.levels[1].speed = 1.0f;
			dets.levels[1].life = 1.0f;
			dets.levels[1].index = 1;
			
			dets.levels[2].damage = 1.0f;
			dets.levels[2].cost = 4.0f;
			dets.levels[2].speed = 1.0f;
			dets.levels[2].life = 1.0f;
			dets.levels[2].index = 2;

			dets.title = "Seeker";
			dets.description = "Will redirect to destroy the closest missile or mine projectile.";
			dets.upgradeType = PortState.MinionUpgradeType.LEVEL_MINION;
		}
		else if (type == PortState.MinionTypes.TWOHIT_MINION) {
			dets.state = -1;

			dets.levels = new PortState.MinionTypeLevelDetail[3];
			dets.levels[0].damage = 1.0f;
			dets.levels[0].cost = 4.0f;
			dets.levels[0].speed = 1.0f;
			dets.levels[0].life = 2.0f;
			dets.levels[0].index = 0;
			
			dets.levels[1].damage = 1.3f;
			dets.levels[1].cost = 4.0f;
			dets.levels[1].speed = 1.0f;
			dets.levels[1].life = 2.0f;
			dets.levels[1].index = 1;
			
			dets.levels[2].damage = 1.5f;
			dets.levels[2].cost = 4.0f;
			dets.levels[2].speed = 1.0f;
			dets.levels[2].life = 2.0f;
			dets.levels[2].index = 2;

			dets.title = "2Hit";
			dets.description = "Can take two hits before being destroyed.";
			dets.upgradeType = PortState.MinionUpgradeType.LEVEL_MINION;
		}

		return dets;
	}
}

