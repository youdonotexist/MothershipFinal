using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class HeroAIManager : MonoBehaviour
{
	MineNode[] mineManager;
	ShieldNode[] shieldManager;
	HeroMovementNode[] movementNodes;
	
	HeroVehicle _vehicle;
	
	int activeMissiles = 0;
	bool teleporting = false;
	
	public GameObject minePrefab;
	public GameObject shieldPrefab;
	
	//AI String
	AIDirective[] aiList;
	int currentAction = 0;
	
	public enum DirectiveState {
		HANDLED,
		UNHANDLED,
		NEXT
	};
	
	
	void Awake() {
		mineManager 	= GetComponentsInChildren<MineNode>();
		shieldManager  	= GetComponentsInChildren<ShieldNode>();
		movementNodes	= GetComponentsInChildren<HeroMovementNode>();
	}
	
	public bool ShieldInSlot() {
		ShieldNode node = shieldManager[_vehicle._currentNode.slot];
		return node._object != null;
	}
	
	public void AddMissile(int count) {
		activeMissiles += count;
	}
	
	public int GetMissileCount() {
		return activeMissiles;	
	}
	
	public SpatialNode MiddleHeroNode() {
		return movementNodes[2];	
	}
	
	public int UsedFarSlots() {
		int count = 0;
		for (int i = 0; i < mineManager.Length; i++) {
			MineNode node = mineManager[i];
			if (node._object != null) {
				count++;	
			}
		}
		
		return count;
	}
	
	public int UsedMiddleSlots() {
		int count = 0;
		for (int i = 0; i < shieldManager.Length; i++) {
			ShieldNode node = shieldManager[i];
			if (node._object != null) {
				count ++;	
			}
		}
		
		return count;
	}
	
	public HeroMovementNode GetHeroNodeForIndex(int index) {
		if (index >=0 && index < movementNodes.Length)
			return movementNodes[index];	
		
		return null;
	}
	
	public ShieldNode GetMidNode(int index) {
		if (index >=0 && index < shieldManager.Length)
			return shieldManager[index];	
		
		return null;
	}
	
	public MineNode GetFarNode(int index) {
		if (index >=0 && index < mineManager.Length)
			return mineManager[index];	
		
		return null;
	}
	
	public SpatialNode[] FindSpotInZone(SpatialNode.SpatialNodeZone zone) {
		if (zone == SpatialNode.SpatialNodeZone.HERO) {
			return FindSpotForHero();
		}
		if (zone == SpatialNode.SpatialNodeZone.MID)
			return FindSpotForShield();
		else if (zone == SpatialNode.SpatialNodeZone.FAR)
			return FindSpotForMine();
		
		return new SpatialNode[2];
	}

	public SpatialNode[] FindSpotForHero() {
		bool found = false;
		SpatialNode[] nodes = new SpatialNode[1];
		
		int randomStart = Random.Range(0, movementNodes.Length);
		int i = randomStart;
		int iterations = 0;
		
		do {
			SpatialNode node = movementNodes[i];
			if (node._object == null) {
				nodes[0] = node;
				found = true;
				break;
			}
			
			i++;
			iterations++;
			if (i >= shieldManager.Length) {
				i = 0;	
			}

			if (iterations > 20) {
				found = false;
				break;
			}

		} while (i != randomStart);
		
		return found == true ? nodes : null;
	}
	
	public SpatialNode[] FindSpotForShield() {
		bool found = false;
		SpatialNode[] nodes = new SpatialNode[2];
		
		int randomStart = Random.Range(0, shieldManager.Length);
		int i = randomStart;
		
		do {
			SpatialNode placeNode = movementNodes[i];
			ShieldNode node = shieldManager[i];
			if (node._object == null) {
				nodes[0] = placeNode;
				nodes[1] = node;
				found = true;
				break;
			}
			
			i++;
			if (i >= shieldManager.Length) {
				i = 0;	
			}
		} while (i != randomStart);
		
		return found == true ? nodes : null;
	}
	
	public SpatialNode[] FindSpotForMine() {
		bool found = false;
		int iterations = 0;
		SpatialNode[] nodes = new SpatialNode[2];
		
		while (found == false) {
			int randomSlotIndex = Random.Range(0, movementNodes.Length);
			HeroMovementNode randomSlot = movementNodes[randomSlotIndex]; //Hero Node
			SpatialNode randomMidSlot = randomSlot.ForwardNode(); //Shield Node
			
			SpatialNode[] mineNodes = randomMidSlot.ForwardNodes(); //Mine Node
			int randomStart = Random.Range(0, mineNodes.Length);
			int i = randomStart;
			
			do {
				SpatialNode node = mineNodes[i];
				if (node._object == null) {
					nodes[0] = randomSlot;
					nodes[1] = node;
					found = true;	
					break;
				}
				i++;
				
				if (i >= mineNodes.Length) {
					i = 0;	
				}
			} while (i != randomStart);
			
			if (iterations++ >= 10) {
				nodes[0] = null;
				nodes[1] = null;
				found = true;
				break;
			}
		}
		
		return nodes;
	}
	
	public AIDirective Next() {
		if (currentAction >= aiList.Length) {
			currentAction = 0;
		}
		
		if (aiList.Length > 0) {
			AIDirective dir = aiList[currentAction];
			currentAction++;
			return dir;
		}
		
		return new AIDirective("", 0.0f);
	}
	
	public void PushAIDirective() {
		if (GameState.Instance._gameState == GameState.GAMESTATE.WIN || GameState.Instance._gameState == GameState.GAMESTATE.GAMEOVER)
						return;

		AIDirective next = Next ();
		if (_vehicle != null) {
			DirectiveState state = _vehicle.HandleDirective(next);
			if (state == DirectiveState.NEXT) {
				StartCoroutine(DelayedPush());
			}
		}
	}
	
	public void SetVehicle(HeroVehicle v) {
		_vehicle = v;	
		
		if (_vehicle != null) {
			aiList = new AIDirective[_vehicle._config.directives.Length];
			for (int i = 0; i < aiList.Length; i++) {
				string[] dirStr = _vehicle._config.directives[i].Split('|');
				aiList[i] = new AIDirective(dirStr[0].Trim(), float.Parse(dirStr[1]));
			}
		}
	}
	
	public int FindSpotForMine2() {
		int randomStart = Random.Range(0, mineManager.Length);
		int i = randomStart;
		
		do {
			if (i >= mineManager.Length) {
				i = 0;	
			}
			
			MineNode node = mineManager[i];
			if (node._object == null) {
				return i;
			}
			i++;
		} while (i != randomStart);
			
		return 0;
	}
	
	IEnumerator DelayedPush() {
		float waitTime = 1.0f;
		float elapsed = 0.0f;
		
		while (elapsed < waitTime) {
			elapsed += Time.deltaTime;
			yield return null;
		}
		PushAIDirective();
		yield return null;
	}
	
	public SpatialNode[] GetHeroNodes() {return movementNodes;}
	public SpatialNode[] GetMidNodes() {return mineManager;}
	public SpatialNode[] GetFarNodes() {return shieldManager;}
	public SpatialNode[] GetNodesForZone(SpatialNode.SpatialNodeZone zone) {
		if (zone == SpatialNode.SpatialNodeZone.HERO)
			return movementNodes;
		else if (zone == SpatialNode.SpatialNodeZone.MID) {
			return shieldManager;	
		}
		else {
			return mineManager;	
		}
	}
	
	
}

