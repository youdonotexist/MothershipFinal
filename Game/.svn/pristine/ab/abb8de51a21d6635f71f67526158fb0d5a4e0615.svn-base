using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MissionManager : MonoBehaviour {
	
	public GameObject heroPrefab;
	public GameObject healthPrefab;
	
	public GameObject offscreen;
	public GameObject offscreenWin;
	public GameObject offscreenLose;
	public GameObject healthSpawn;
	
	public AudioClip music1prefab;
	public AudioClip music2prefab;
	public AudioClip winMusic;
	public AudioClip loseMusic;
	
	UILabel _deathScreen;
	UIButton _deathButton;
	
	GameObject currentHeroObject;
	MothershipVehicle _mothership;
	
	HeroAIManager _manager;
	int currentHero = 0;
	
	HeroConfig[] heros;
	
	bool quitting = false;
	
	//AI
	string[] Hero1 = new string[]{};
	string[] Hero2 = new string[] {
		"MOVE | 4"
	};
	string[] Hero3 = new string[] {
		"FIRE MISSILE | 2",
		"MOVE | 4"
	};
	
	string[] Hero4 = new string[] {
		"FIRE MISSILE | 2",
		"MOVE | 4",
		"DEPLOY MINE | 3"
	};
	
	string[] Hero5 = new string[] {
		"FIRE MISSILE | 2",
		"MOVE | 4",
		"DEPLOY SHIELD | 3"
	};
	
	string[] Hero6 = new string[] {
		"FIRE MISSILE | 2",
		"MOVE | 4",
		"DEPLOY SHIELD | 3",
		"DEPLOY MINE | 2"
	};
	
	string[] Hero7 = new string[] {
		"FIRE MISSILE | 2",
		"MOVE | 4",
		"DEPLOY SHIELD | 3",
		"DEPLOY MINE | 2"
	};
	
	string[] Hero8 = new string[] {
		"FIRE MISSILE | 1",
		"MOVE | 2",
		"DEPLOY SHIELD | 3",
		"DEPLOY MINE | 2"
	};
	
	string[] Hero9 = new string[] {
		"FIRE MISSILE | 1",
		"MOVE | 2",
		"DEPLOY SHIELD | 1",
		"DEPLOY MINE | 1"
	};
	
	string[] Hero10 = new string[] {
		"FIRE MISSILE | 1",
		"MOVE | 1",
		"FIRE MISSILE | 1",
		"DEPLOY SHIELD | 1",
		"FIRE MISSILE | 1",
		"DEPLOY MINE | 1"
	};
	
	void BuildLevels (){
		heros = new HeroConfig[10];
		heros[0] = new HeroConfig(Hero1, 0, 0, 300.0f, false, false, "Hero Jacob");
		heros[1] = new HeroConfig(Hero2, 0, 0, 300.0f, false, false, "Hero Stryker");
		heros[2] = new HeroConfig(Hero3, 1, 0, 300.0f, true, false, "Hero Jimmy");
		heros[3] = new HeroConfig(Hero4, 1, 0, 300.0f, true, false, "Hero Audra");
		heros[4] = new HeroConfig(Hero5, 2, 1, 300.0f, true, false, "Hero Kristi");
		heros[5] = new HeroConfig(Hero6, 2, 2, 300.0f, true, false, "Hero Ashley");
		heros[6] = new HeroConfig(Hero7, 3, 2, 400.0f, true, false, "Hero Tom");
		heros[7] = new HeroConfig(Hero8, 4, 4, 400.0f, true, false, "Hero Dan");
		heros[8] = new HeroConfig(Hero9, 6, 4, 400.0f, true, true, "Hero Greyson");
		heros[9] = new HeroConfig(Hero10, 8, 4, 400.0f, true, true, "Hero Goat");
			
	}
	
	void OnApplicationQuit() {
		quitting = true;	
	}
	
	void Awake() {
		Application.targetFrameRate = 60;
		
		_manager = GameObject.Find("_MinesAndShields").GetComponent<HeroAIManager>();	
		_deathScreen = GameObject.Find("OutcomeLabel").GetComponent<UILabel>();
		_deathButton = GameObject.Find("RetryButton").GetComponent<UIButton>();
		_mothership = GameObject.Find("Mothership").GetComponent<MothershipVehicle>();
		
		_deathScreen.gameObject.SetActiveRecursively(false);
		_deathButton.gameObject.SetActiveRecursively(false);
	}
	
	void Start() {
		BuildLevels ();
		SpawnHero ();
	}
	
	public void OnHeroDie() {
		if (quitting == false) {
			StartCoroutine(SpawnHealthAndWait());
		}
	}
	
	public void OnMothershipDie() {
		StartCoroutine(YouLose());
	}
	
	IEnumerator SpawnHealthAndWait() {
		int N = Random.Range(1, 5);
		
		SphereCollider sc = (SphereCollider) healthSpawn.collider;
		
		
		exSprite[] sprites = new exSprite[N];
		
		for (int i = 0; i < N; i++) {
			Vector2 rand = Random.insideUnitCircle * sc.radius;
			GameObject instance = (GameObject) Instantiate(healthPrefab, new Vector3(rand.x, rand.y, 0.0f), Quaternion.identity);
			sprites[i] = instance.GetComponent<exSprite>();
		}
		
		float aliveTime = 4.0f;
		float elapsed = 0.0f;
		while (elapsed < aliveTime) {
			
			foreach(exSprite s in sprites) {
				if (s != null) {
					Color c = s.color;
					c.a = (1.0f - (elapsed/aliveTime));
					s.color = c;
				}
			}
			elapsed += Time.deltaTime;
			yield return null;
		}
		
		foreach(exSprite s in sprites) {
			if (s != null) {
				Destroy (s.gameObject);
			}
		}
		
		while (_manager.GetMissileCount() > 0) {
			yield return null;	
		}
		
		SpawnHero ();
	}
	
	void SpawnHero() {
		if (currentHero < heros.Length) {
			HeroConfig config = heros[currentHero];
			currentHeroObject = (GameObject) Instantiate(heroPrefab);
			currentHeroObject.transform.position = offscreen.transform.position;
			
			HeroVehicle hero = currentHeroObject.GetComponent<HeroVehicle>();
			
			hero.concurrentMines = config.maximumMines;
			hero.concurrentShields = config.maximumShields;
			hero.directives = config.directives;
			hero.name = config.heroName;
			hero.moveSpeed = config.movementSpeed;
			hero.HasMissiles = config.hasMissiles;
			
			StartCoroutine(DriveOnScreen(hero));
			
			currentHero++;
		}
		else if (_mothership != null) {
			StartCoroutine(YouWin());
		}
	}
	
	IEnumerator YouLose() {
		_deathScreen.gameObject.SetActiveRecursively(true);
		_deathButton.gameObject.SetActiveRecursively(true);
		_deathScreen.text = "You Lose";// (and your race is pretty much doomed)";
		
		StartCoroutine(MothershipLose());
		
		while (!Input.GetKeyDown (KeyCode.R)) {
			yield return null;
		}
		
		Application.LoadLevel("MainMenu");
	}
	
	IEnumerator YouWin() {
		_deathScreen.gameObject.SetActiveRecursively(true);
		_deathButton.gameObject.SetActiveRecursively(true);
		_deathScreen.text = "You Win";// (and it's time to enjoy interbreeding between species!) ";
		_deathButton.GetComponent<UILabel>().text = "Play Again";
		
		gameObject.audio.clip = winMusic;
		gameObject.audio.Play ();
		
		StartCoroutine(MothershipWin());
		
		while (!Input.GetKeyDown (KeyCode.R)) {
			yield return null;
		}
		
		Application.LoadLevel("MainMenu");
	}
	
	IEnumerator MothershipLose() {
			
		if (currentHeroObject != null) {
			StartCoroutine(CurrentHeroWin());	
		}
		
		gameObject.audio.clip = loseMusic;
		gameObject.audio.Play ();
		
		float lastDeploy = 0.0f;
		float waitToDeploy = 2.3f;
		
		for (int i = currentHero + 1; i < heros.Length; i++) {
			while (lastDeploy < waitToDeploy) {
				lastDeploy += Time.deltaTime;
				yield return null;
			}	
			
			lastDeploy = 0.0f;
			StartCoroutine(SpawnHeroWin(i));
		}
	}
	
	IEnumerator CurrentHeroWin() {
		Vector3 start = currentHeroObject.transform.position;
		Vector3 end = offscreenLose.transform.position;
		
		HeroVehicle veh = currentHeroObject.GetComponent<HeroVehicle>();
		veh.Firelaser = false;
		veh.directives = new string[] {};
		
		float duration = 3.0f;
		float elapsed = 0.0f;
		
		while (elapsed < duration) {
			currentHeroObject.transform.position = Vector3.Lerp (start,end, elapsed/duration);
			elapsed += Time.deltaTime;
			yield return null;
		}
		
		_manager.SetVehicle(null);
	}
	
	IEnumerator SpawnHeroWin(int index) {
		if (index < heros.Length) {
			HeroConfig config = heros[index];
			GameObject go = (GameObject) Instantiate(heroPrefab);
			go.transform.position = offscreen.transform.position;
			HeroVehicle hero = go.GetComponent<HeroVehicle>();
			
			//hero.concurrentMines = config.maximumMines;
			//hero.concurrentShields = config.maximumShields;
			//hero.directives = config.directives;
			hero.name = config.heroName;
			//hero.moveSpeed = config.movementSpeed;
			//hero.HasMissiles = config.hasMissiles;
			
			Vector3 start = go.transform.position;
			Vector3 end = offscreenLose.transform.position;
			
			float duration = 3.0f;
			float elapsed = 0.0f;
			
			while (elapsed < duration) {
				go.transform.position = Vector3.Lerp (start,end, elapsed/duration);
				elapsed += Time.deltaTime;
				yield return null;
			} 
		}
	}
	
	IEnumerator MothershipWin() {
		GameObject mothership = GameObject.Find("Mothership");	
		MothershipVehicle veh = mothership.GetComponent<MothershipVehicle>();
		veh.EnableUI(false);
		veh.EnablePorts(false);
		
		Vector3 end = offscreenWin.transform.position;
		Vector3 start = mothership.transform.position;
		float moveTime = 6.0f;
		float currentTime = 0.0f;
		
		while (currentTime < moveTime) {
			mothership.transform.position = Vector3.Lerp (start, end, currentTime/moveTime);
			currentTime += Time.deltaTime;
			yield return null;	
		}
	}
	
	IEnumerator DriveOnScreen(HeroVehicle hero) {
		float duration = 4.0f;
		float currentDuration = 0.0f;
		Vector3 start = offscreen.transform.position;
		Vector3 end = _manager.MiddleHeroNode().transform.position;
		
		hero.audio.loop = true;
		hero.audio.clip = hero._spawnClip;
		hero.audio.Play();
		
		_mothership.EnablePorts(false);
		
		while (currentDuration < duration) {
			if (hero != null) {
				hero.rigidbody.MovePosition(Vector3.Lerp(start, end, currentDuration/duration));
			}
			currentDuration += Time.deltaTime;
			
			yield return null;
		}
		
		_mothership.EnablePorts(true);
		
		_manager.SetVehicle(hero);
		if (currentHero-1 == 0) {
			gameObject.audio.clip = music1prefab;
			gameObject.audio.loop = true;
			gameObject.audio.Play ();
		}
		else if (currentHero == 6) {
			gameObject.audio.clip = music2prefab;
			gameObject.audio.loop = true;
			gameObject.audio.Play();
		}
		
		if (hero != null) {
			hero.audio.Stop();
			hero.audio.loop = false;
			hero.audio.clip = null;
			
			hero.rigidbody.MovePosition(end);
			hero.Firelaser = true;
		}
	}
}
