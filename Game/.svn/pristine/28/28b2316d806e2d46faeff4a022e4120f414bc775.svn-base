using UnityEngine;
using System.Collections;

public class IKTest : MonoBehaviour
{
	public Transform target;
	ArmManager _armManager;
	
	Joint[] _joints;
	Transform[] _jointTransforms;
	public ArmGrabber _armGrabber;
	public Transform m_Effector;
	
	public Transform idleTarget = null;
	public Transform idleTargetHolder = null;

	public bool UpperArm = true;
	Bone[] _bones = null;
	Magnet _magnet = null;
	
	//DEBUG
	Vector3 currentThing1;
	Vector3 currentThing2;
	
	float tick = 0.001f;
	float tickElapsed = 0.0f;
	
	void OnEnable() {
		_armGrabber = GetComponentInChildren<ArmGrabber>();
		_armGrabber._arm = this;
		
		_magnet = gameObject.GetComponentInChildren<Magnet>();
		_magnet._ikTest = this;
		
		_bones = GetComponentsInChildren<Bone>();
		_joints = GetComponentsInChildren<Joint>();
		
		_jointTransforms = new Transform[_joints.Length];
		for (int i = 0; i < _joints.Length; i++) {
			_jointTransforms[i] = _joints[i].transform;	
		}
		
		exSprite[] sprites = GetComponentsInChildren<exSprite>();
		foreach (exSprite sprite in sprites) {
			if (sprite.name.Contains("Bone")) {
				Vector3 pos = sprite.transform.position;
				pos.z = LayerManager._3;
				sprite.transform.position = pos;
			}
			else if (sprite.name.Contains("Joint")) {
				Vector3 pos = sprite.transform.position;
				pos.z = LayerManager._3_5;
				sprite.transform.position = pos;
			}
			else if (sprite.name == "END") {
				Vector3 pos = sprite.transform.position;
				pos.z = LayerManager._2;
				sprite.transform.position = pos;
			}
		}
	}
	
	bool IsReadyToIK() {
		for (int i = _bones.Length - 1; i >= 0; i--) {
			Bone b = _bones[i];
			if (!b.IsFinished() || b.IsCollapsed()) {
				return false; 
			}
		}
		
		return true;
	}
	
	public bool IsRetracting() {
		for (int i = _bones.Length - 1; i >= 0; i--) {
			Bone b = _bones[i];
			if (!b.IsFinished() || !b.IsCollapsed()) {
				return true; 
			}
		}
		
		return false;
	}
	
	public bool IsRetracted() {
		for (int i = _bones.Length - 1; i >= 0; i--) {
			Bone b = _bones[i];
			if (!b.IsFinished() || !b.IsCollapsed()) {
				return false; 
			}
		}
		
		return false;
	}
	
	// Update is called once per frame
	void FixedUpdate ()
	{
		
		if (tickElapsed > tick &&  IsReadyToIK()) {
			if (target != null) {
				Vector3 dir = (target.position - m_Effector.position).normalized;
				Vector3 pos = m_Effector.position + (dir * 2.0f);
				currentThing1 = pos;
				ComputeIK2(pos);
			}
			else {
				Vector3 dir = (idleTarget.position - m_Effector.position).normalized;
				Vector3 pos = m_Effector.position + (dir * 2.0f);
				currentThing1 = pos;
				ComputeIK2(pos);
			}
			tickElapsed = 0.0f;
		}
		
		tickElapsed += Time.fixedDeltaTime;
	}
	
	bool ComputeIK2(Vector3 end) {
		
		for (int i = 0; i < _jointTransforms.Length; i++) {
			CCD_Ik(_jointTransforms[i], 0.0f, new Vector2(m_Effector.position.x, m_Effector.position.y), new Vector2(end.x, end.y), _joints[i].minMaxLimit);	
		}
		
		return true;
	}
	
	void CCD_Ik(Transform jointTrans, float length, Vector2 effector, Vector2 target, Vector2 minMaxAngle) {
		Vector2 joint = new Vector2(jointTrans.position.x, jointTrans.position.y);
		// Get the vector from the current bone to the end effector position.
        float curToEndX = effector.x - joint.x;
        float curToEndY = effector.y - joint.y;
        float curToEndMag = Mathf.Sqrt( curToEndX*curToEndX + curToEndY*curToEndY );
 
        // Get the vector from the current bone to the target position.
        float curToTargetX = target.x - joint.x;
        float curToTargetY = target.y - joint.y;
        float curToTargetMag = Mathf.Sqrt(   curToTargetX*curToTargetX
                                           + curToTargetY*curToTargetY );
 
        // Get rotation to place the end effector on the line from the current
        // joint position to the target postion.
        float cosRotAng;
        float sinRotAng;
        float endTargetMag = (curToEndMag*curToTargetMag);
        
		cosRotAng = (curToEndX*curToTargetX + curToEndY*curToTargetY) / endTargetMag;
        sinRotAng = (curToEndX*curToTargetY - curToEndY*curToTargetX) / endTargetMag;
 
        // Clamp the cosine into range when computing the angle (might be out of range
        // due to floating point error).
        float rotAng = Mathf.Acos( Mathf.Max(-1.0f, Mathf.Min(1.0f,cosRotAng) ) );
        if( sinRotAng < 0.0f )
            rotAng = -rotAng;
 
        // Rotate the end effector position.
        //effector.x = joint.x + cosRotAng*curToEndX - sinRotAng*curToEndY;
        //effector.y = joint.y + sinRotAng*curToEndX + cosRotAng*curToEndY;
 
        // Rotate the current bone in local space (this value is output to the user)
		Vector3 euler = jointTrans.localEulerAngles;
		float angle = Mathf.Rad2Deg * SimplifyAngle( (Mathf.Deg2Rad * euler.z) + rotAng );
		
		//angle = Mathf.Max (minMaxAngle.x, Mathf.Min (angle, minMaxAngle.y));
		if (!Mathf.Approximately(euler.z, angle)) {
			euler.z = angle;
        	jointTrans.localRotation = Quaternion.Euler(euler);
		}
	}
	
	private float SimplifyAngle(float angle)
	{
	    float ang = angle % (2.0f * Mathf.PI);
	    if( ang < -Mathf.PI )
	        ang += (2.0f * Mathf.PI);
	    else if( ang > Mathf.PI )
	        ang -= (2.0f * Mathf.PI);
	    return ang;
	}
	
	public void DeployArms() {
		StartCoroutine(DeployArmsCoroutine());
	}
	
	public void RetractArm() {
		if (!IsRetracted()) {
			StartCoroutine(RetractArmsCoroutine());
		}
	}
	
	public Magnet GetMagnet() {
		return _magnet;	
	}
	
	IEnumerator RetractArmsCoroutine() {
		_magnet.collider.enabled = false;
		_bones = GetComponentsInChildren<Bone>();
		for (int i = _bones.Length - 1; i >= 0; i--) {
			Bone b = _bones[i];
			b.CollapseBone();
			
			while (!b.IsFinished()) {
				yield return null;	
			}
			
			yield return null;
		}
		
		_magnet.OnRetracted();
	}
	
	IEnumerator DeployArmsCoroutine() {
		_bones = GetComponentsInChildren<Bone>();
		for (int i = _bones.Length - 1; i >= 0; i--) {
			Bone b = _bones[i];
			b.InflateBone();
			
			while (!b.IsFinished()) {
				yield return null;	
			}
			
			yield return null;
		}	
		
		_magnet.collider.enabled = true;
		_magnet.OnExtended();
	}
	
	void OnDrawGizmos() {
		//Upper
		//DrawLines (m_UpperArm.position, minMaxUpper);
		//DrawLines (m_MiddleArm.position, minMaxMid);
		//DrawLines (m_LowerArm.position, minMaxLower);
		
		Gizmos.DrawCube(currentThing1, new Vector3(30.0f, 30.0f, 30.0f));
	}

	public void SetManager(ArmManager manager) {
		_armManager = manager;
	}

	public ArmManager GetManager() {
		return _armManager;
	}
	
	void DrawLines(Vector3 pos, Vector2 minMax) {
		float x = pos.x + 100.0f * Mathf.Cos(Mathf.Deg2Rad * (minMax.x + 90));
		float y = pos.y + 100.0f * Mathf.Sin(Mathf.Deg2Rad * (minMax.x + 90));
		
		float x2 = pos.x + 100.0f * Mathf.Cos(Mathf.Deg2Rad * (minMax.y + 90));
		float y2 = pos.y + 100.0f * Mathf.Sin(Mathf.Deg2Rad * (minMax.y + 90));
		
		Debug.DrawLine(pos, new Vector3(x, y, pos.z), Color.red);
		Debug.DrawLine(pos, new Vector3(x2, y2, pos.z), Color.blue);
	}
}

