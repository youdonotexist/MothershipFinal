using UnityEngine;
using System.Collections;

public class HeroVehicle : Vehicle {
	
	public GameObject missileProjectile = null;
	public GameObject muzzlePoint = null;
	
	public AudioClip _spawnClip;
	
	exSpriteAnimation _anim;
	
	GamePlayHUD _gameplayHUD;
	UILabel _label = null;
	
	HeroAIManager _aiManager;
	MissionManager _missionManager;
	
	public HeroConfig _config;
	public DirectivePack[] _directivePacks;
	
	public SpatialNode _currentNode;
	
	Damagable _damagable = null;
	
	public float moveDirection = 0;
	public string animationPrefix = "";
	
	void Awake() {
		GameObject hud = GameObject.Find("GameplayHUD");
		GameObject aiMan = GameObject.Find("_MinesAndShields");
		GameObject missionMan = GameObject.Find("_MissionManager");
		
		if (hud)
			_gameplayHUD = hud.GetComponent<GamePlayHUD>();
		
		_aiManager = aiMan != null ? aiMan.GetComponent<HeroAIManager>() : null;
		_missionManager = missionMan != null ? missionMan.GetComponent<MissionManager>() : null;
		
		_damagable = GetComponent<Damagable>();
		_anim = GetComponentInChildren<exSpriteAnimation>();
		
		if (_aiManager != null)
			_currentNode = _aiManager.MiddleHeroNode();
	}
	
	void Start() {
		if (_gameplayHUD != null) {
			if (_config != null)
				_damagable.SetMaxHealth(_config.getFloat("health"));
			_gameplayHUD.SetHeroHealthCount(_damagable.Health/500.0f, 10.0f);
			_gameplayHUD.SetNewHero(gameObject.name,  _missionManager.HeroesLeft());
		}
		
		_directivePacks = GetComponentsInChildren<DirectivePack>();
		foreach (DirectivePack pack in _directivePacks) {
			pack.SetHero(this);	
		}
	}
	
	// Update is called once per frame
	void Update () {
		
		//Health
		if (_gameplayHUD != null) {
			_gameplayHUD.SetHeroHealthCount(_damagable.Health/500.0f, 10.0f);
		}
		
		if (_anim != null) {
			if (moveDirection < 0.0f) {
				if (!_anim.IsPlaying(animationPrefix + "MoveUp"))
					_anim.Play(animationPrefix + "MoveUp");	
			}
			else if (moveDirection > 0.0f) {
				if (!_anim.IsPlaying(animationPrefix + "MoveDown"))
					_anim.Play (animationPrefix + "MoveDown");	
			}
			else {
				if (!_anim.IsPlaying(animationPrefix + "Stop"))
					_anim.Play(animationPrefix + "Stop");	
			}
		}
		
		if (_damagable.Health <= 0.0f) {
			if (_aiManager != null)
				_aiManager.SetVehicle(null);
		
			if (GameState.Instance.ApplicationQuit == false) {
				GameObject go = GameObject.Find("_MissionManager");
				if (go != null) {
					MissionManager mm = go.GetComponent<MissionManager>();
					mm.OnHeroDie();
				}
			}
			
			Destroy (gameObject);	
		}
	}
	
	public void OnHeroReady() {
		foreach (DirectivePack pack in _directivePacks) {
			pack.OnHeroReady();
		}
		
		_aiManager.PushAIDirective();
	}
	public void OnHeroWin() {
		foreach (DirectivePack pack in _directivePacks) {
			pack.OnHeroWin();
		}	
	}
	
	public void ClearDirectives() {
		_config.directives = new string[] {};
	}
	
	public HeroAIManager.DirectiveState HandleDirective(AIDirective directive) {
		foreach (DirectivePack pack in _directivePacks) {
			HeroAIManager.DirectiveState state = pack.handleDirective(directive);
			if (state != HeroAIManager.DirectiveState.UNHANDLED) {
				return state;		
			}
		}
		
		return HeroAIManager.DirectiveState.UNHANDLED;
	}
}