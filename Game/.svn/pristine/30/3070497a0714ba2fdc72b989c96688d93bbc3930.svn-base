using UnityEngine;
using System.Collections;

public class JuggernautHeroDirectives : DirectivePack
{
	public GameObject laserMissilePrefab = null;
	public GameObject turretMinePrefab = null;

	public AudioClip chargeLaserBuildup = null;
	public AudioClip chargeLaserHitMothership = null;
	
	LaserMissile _laserMissile = null;
	AngledTripleShot _laser;
	
	//Laser
	public float waitBetweenFire = 1.0f;
	public bool canFire = false;

	float lastFireTime = 1.0f;
	int shotsPerWait = 1;
	int currentShotsPerWait = 0;
	
	bool deploying = false;
	
	IKTest[] _ikArms;
	
	void Start() {
		_laser = GetComponent<AngledTripleShot>();	
		if (_laser != null) {
			_laser.damageAmt = _vehicle._config.getFloat("small_projectile_damage");
		}
		_ikArms = GetComponentsInChildren<IKTest>();

		for (int i = 0; i < _ikArms.Length; i++) {
			IKTest arm = _ikArms[i];
			arm.setParentDamagable(_vehicle.GetDamagable());
		}
	}
	
	void FixedUpdate() {
		if (canFire) {
			if (currentShotsPerWait < shotsPerWait) {
				IKTest t1 = _ikArms[0];
				IKTest t2 = _ikArms[1];

				if (_laser == null) return;

				bool isRetracted1 = t1.IsRetracted();
				bool isRetracted2 = t2.IsRetracted();

				bool isEmpty1 = t1.GetMagnet().GetCurrent() == null;
				bool isEmpty2 = t2.GetMagnet().GetCurrent() == null;

				_laser.left = isRetracted1 && isEmpty1;
				_laser.right = isRetracted2 && isEmpty2;
				
				bool didFire = _laser.Fire(_vehicle.rigidbody.velocity);
				if (didFire) {
					currentShotsPerWait++;
					lastFireTime = 0.0f;
				}
			}
			else {
				lastFireTime += Time.deltaTime;
				if (lastFireTime > waitBetweenFire) {
					currentShotsPerWait = 0;	
				}
			}
		}	
	}
	
	public override HeroAIManager.DirectiveState handleDirective(AIDirective directive) {
		if (directive.action == "FIRE CHARGELASER") {
			if (_laserMissile == null) {
				GameObject go = (GameObject) Instantiate(laserMissilePrefab);
				go.transform.position = _vehicle.muzzlePoint.transform.position;
				go.transform.parent = _vehicle.transform;
				_laserMissile = go.GetComponent<LaserMissile>();
				_laserMissile.chargeLaserBuildup = chargeLaserBuildup;
				_laserMissile.chargeLaserHitMothership = chargeLaserHitMothership;
			}
			
			if (_laserMissile.IsBusy() == false) {
				_laserMissile.fireDuration = _vehicle._config.getFloat("chargeLaserTime");
				_laserMissile.damagePerSecond = _vehicle._config.getFloat("chargeLaserDamage");
				canFire = false;
				_laserMissile.StartFiring(directive.waitAfter);
				StartCoroutine(WaitForLaserMissile(directive));
				return HeroAIManager.DirectiveState.HANDLED;
			}
			else {
				return HeroAIManager.DirectiveState.NEXT;	
			}
		}
		else if (directive.action == "DEPLOY TURRETMINE") {
			if (_aiManager.UsedFarSlots() < _vehicle._config.getInt ("maxTurretMines")) {
				TurretMine mine = turretMinePrefab.GetComponent<TurretMine>();
				mine.turretMineProjectileDamage = _vehicle._config.getFloat("turret_mine_proj_damage");
				mine.waitBetweenFire = _vehicle._config.getFloat("turretFrequency");

				StartCoroutine(DeployDeployable(directive, turretMinePrefab, SpatialNode.SpatialNodeZone.FAR));
				return HeroAIManager.DirectiveState.HANDLED;
			}
			else {
				return HeroAIManager.DirectiveState.NEXT;
			}
		}
		else if (directive.action == "DEPLOY GRABBER") {
			if (!deploying) {
				bool didDeploy = false;
				foreach (IKTest ik in _ikArms) {
					if (!ik.GetMagnet().HasObject()) {
						didDeploy = true;
						ik.DeployArms();
					}
				}
				
				if (didDeploy) {
					deploying = true;
					StartCoroutine(WaitForArms(directive));
					return HeroAIManager.DirectiveState.NEXT;
				}
				else {
					return HeroAIManager.DirectiveState.NEXT;
				}
			}
			else {
				return HeroAIManager.DirectiveState.NEXT;	
			}
		}
		else if (directive.action == "MOVE FORWARD") {
			StartCoroutine(MoveToLane(directive));
			return HeroAIManager.DirectiveState.HANDLED;
		}
		else if (directive.action == "MOVE") {
			StartCoroutine(MoveToLaneBasic(Random.Range(0, 5), directive));
			return HeroAIManager.DirectiveState.HANDLED;
		}
		
		return HeroAIManager.DirectiveState.UNHANDLED;
	}
	
	public override void OnHeroReady() {
		canFire = true;
	}
	
	public override void OnHeroWin() { canFire = false; }
	
	public bool OpenArm() {
		foreach (IKTest ik in _ikArms) {
			if (ik.GetMagnet().HasObject() == false) {
				return true;
			}
		}
		
		return false;
	}
	
	IEnumerator WaitForLaserMissile(AIDirective directive) {
		canFire = false;
		while (_laserMissile.IsBusy()) {
			yield return null;	
		}
		
		canFire = true;
		
		_aiManager.PushAIDirective();
	}
	
	IEnumerator WaitForArms(AIDirective directive) {
		
		if (OpenArm()) {
			float waitfordirective = 0.0f;
			float lastTimestamp = Time.time;
			while (waitfordirective < _vehicle._config.getInt ("maxTurretMines")) {
				waitfordirective += (Time.time - lastTimestamp);
				lastTimestamp = Time.time;
				
				//While we're waiting, we should move
				//How many moves can we do?
				//AIDirective moveDirective = new AIDirective("MOVE", 0.0f);
				yield return null;
				//yield return StartCoroutine(MoveToLaneForFun(moveDirective));
			}
			
			foreach (IKTest ik in _ikArms) {
				if (ik.GetMagnet().HasObject() == false) {
					ik.RetractArm();
				}
			}
			
			bool retracting = true;
			while (retracting) {
				retracting = false;
				foreach (IKTest ik in _ikArms) {
					if (ik.IsRetracting()) {
						retracting = true;
						break;
					}
				}
				yield return null;
			}
		}
		
		deploying = false;
		canFire = _laserMissile == null || !_laserMissile.IsBusy();
		
		//_aiManager.PushAIDirective();
	}
	
	IEnumerator MoveToLaneForFun(AIDirective directive) {
		SpatialNode node = FindOpenMoveSpot();
		if (node != null) {
			Vector3 startPosition = _vehicle.transform.position;
			float startDistance = Vector3.Distance(startPosition, node.transform.position);
			float moveTime = startDistance / _vehicle._config.getInt ("moveSpeed");
			
			yield return StartCoroutine(MoveToLaneProper(node, moveTime));
			
			float waitfordirective = 0.0f;
			while (waitfordirective < directive.waitAfter) {
				waitfordirective += Time.deltaTime;
				yield return null;
			}
		}
	}
	
	IEnumerator MoveToLane(AIDirective directive) {
		SpatialNode node = FindOpenMoveSpot();
		if (node != null) {
			Vector3 startPosition = _vehicle.transform.position;
			float startDistance = Vector3.Distance(startPosition, node.transform.position);
			float moveTime = startDistance / _vehicle._config.getInt ("moveSpeed");
			
			yield return StartCoroutine(MoveToLaneProper(node, moveTime));
			
			float waitfordirective = 0.0f;
			while (waitfordirective < directive.waitAfter) {
				waitfordirective += Time.deltaTime;
				yield return null;
			}
		}
		
		_aiManager.PushAIDirective();
	}
	
	IEnumerator MoveToLaneBasic(int slot, AIDirective directive) {
		HeroMovementNode node = _aiManager.GetHeroNodeForIndex(slot);
		Vector3 startPosition = _vehicle.transform.position;
		float startDistance = Vector3.Distance(startPosition, node.transform.position);
		float moveTime = startDistance / _vehicle._config.getInt ("moveSpeed");
		
		yield return StartCoroutine(MoveToLaneProper(node, moveTime));
		
		float waitfordirective = 0.0f;
		while (waitfordirective < directive.waitAfter) {
			waitfordirective += Time.deltaTime;
			yield return null;
		}
		
		_aiManager.PushAIDirective();
	}
	
	SpatialNode FindOpenMoveSpot() {
		SpatialNode current = _vehicle._currentNode;
		
		SpatialNode.SpatialNodeZone currentZone = current.GetZone();
		
		SpatialNode.SpatialNodeZone newZone = Random.Range(0, 2) == 0 ? 
												SpatialNode.SpatialNodeZone.HERO : 
												SpatialNode.SpatialNodeZone.MID;
		
		if (currentZone == newZone) {
			SpatialNode[] nodes = _aiManager.GetNodesForZone(newZone);	
			int randomMid = Random.Range(0, nodes.Length);
			SpatialNode randomMidNode = nodes[randomMid];
			return randomMidNode._object == null ? randomMidNode : null;
		}
		else {
			SpatialNode[] nodes = null;
			if (newZone == SpatialNode.SpatialNodeZone.MID) {
				nodes = current.ForwardNodes();
			}
			else {
				nodes = current.BackwardNodes();
			}
			
			int randomMid = Random.Range(0, nodes.Length);
			SpatialNode randomMidNode = nodes[randomMid];
			return randomMidNode != null && randomMidNode._object == null ? randomMidNode : null;
		}
	}
	
}

