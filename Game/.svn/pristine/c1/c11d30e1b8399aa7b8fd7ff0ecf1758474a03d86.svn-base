using UnityEngine;
using System.Collections;
using System.Text;

public class HeroVehicle : Vehicle {
	
	public GameObject missileProjectile = null;
	public GameObject muzzlePoint = null;
	public GameObject explosionPrefab;
	
	public AudioClip _spawnClip;
	
	exSpriteAnimation _anim;
	exSprite _sprite;
	
	HeroAIManager _aiManager;
	
	public HeroConfig _config;
	public DirectivePack[] _directivePacks;
	
	public SpatialNode _currentNode;
	
	protected Damagable _damagable = null;
	
	public float moveDirection = 0;
	public string animationPrefix = "";
	public bool preventMovementAnimations = false;
	bool bulletHellHero = false;

	void Awake() {
		GameObject aiMan = GameObject.Find("_MinesAndShields");
		
		_aiManager = aiMan != null ? aiMan.GetComponent<HeroAIManager>() : null;
		_damagable = GetComponent<Damagable>();
		_anim = GetComponentInChildren<exSpriteAnimation>();
		_sprite = GetComponentInChildren<exSprite>();
		
		if (_aiManager != null)
			_currentNode = _aiManager.MiddleHeroNode();

		if (_aiManager != null) {
			Vector3 pos = transform.position;
			pos.z = LayerManager._3;
			transform.position = pos;
		}
	}
	
	void Start() {
		if (_config != null) {
			_damagable.SetMaxHealth(_config.getFloat("health"));
		}

		Messenger.Broadcast("OnHeroHealthCountChange", _damagable.Health/50.0f, 10.0f, true);

		_damagable.DamageCallback = OnDamageCallback;
		
		_directivePacks = GetComponentsInChildren<DirectivePack>();
		foreach (DirectivePack pack in _directivePacks) {
			pack.SetHero(this);	
		}

		if (_config != null) {
			bulletHellHero = _config.getBool("bossBattle");
		}
	}

	void OnDamageCallback(float amt) {
		Messenger.Broadcast("OnHeroHealthCountChange", _damagable.Health/50.0f, 10.0f, false);

		StartCoroutine(FlashDamage(0.1f));
	}

	IEnumerator FlashDamage(float duration) {
		float elapsed = 0.0f;
		while (elapsed < duration) {
			_sprite.color = Color.green;
			elapsed += Time.deltaTime;
			yield return null;
		}

		_sprite.color = Color.white;

	}
	
	// Update is called once per frame
	void Update () {
		StringBuilder sb = new StringBuilder(animationPrefix);

		if (bulletHellHero) 
			sb.Append("Bullethell");

		if (_anim != null && preventMovementAnimations == false) {
			if (moveDirection < 0.0f) {
				sb.Append("MoveUp");
			}
			else if (moveDirection > 0.0f) {
				sb.Append("MoveDown");
			}
			else {
				sb.Append("Stop");
			}

			string animName = sb.ToString();
			if (!_anim.IsPlaying(animName)) {
			    _anim.Play(animName);	
			}
		}
		
		if (_damagable.Health <= 0.0f) {
			if (_aiManager != null)
				_aiManager.SetVehicle(null);
		
			if (GameState.Instance.DidQuitApplication() == false) {
				Messenger.Broadcast("OnHeroDie", transform.position);
			}

			if (!bulletHellHero) {
				if (explosionPrefab != null) {
					Instantiate(explosionPrefab, transform.position, explosionPrefab.transform.rotation);
				}
				Destroy (gameObject);	
			}
		}
	}
	
	public void OnHeroReady() {
		foreach (DirectivePack pack in _directivePacks) {
			pack.OnHeroReady();
		}
		
		_aiManager.PushAIDirective();
	}
	public void OnHeroWin() {
		foreach (DirectivePack pack in _directivePacks) {
			pack.OnHeroWin();
		}	
	}
	
	public void ClearDirectives() {
		_config.directives = new string[] {};
	}
	
	public HeroAIManager.DirectiveState HandleDirective(AIDirective directive) {
		foreach (DirectivePack pack in _directivePacks) {
			if (pack.enabled) {
				HeroAIManager.DirectiveState state = pack.handleDirective(directive);
				if (state != HeroAIManager.DirectiveState.UNHANDLED) {
					return state;		
				}
			}
		}
		
		return HeroAIManager.DirectiveState.UNHANDLED;
	}
	
	public exSpriteAnimation GetAnimation() {
		return _anim;
	}

	public Damagable GetDamagable() {
		return _damagable;
	}

	public void UpdateCurrentNode(SpatialNode newNode) {
		if (_currentNode != null) {
			_currentNode._object = null;
		}

		_currentNode = newNode;
		if (newNode != null) {
			newNode._object = this;
		}
	}
}