using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Upgrader : MonoBehaviour {
	public GameObject[] upgrades;
	public GameObject upgraderContainer;
	public UILabel scrapCount;

	UpgradeTree _currentTree;
	public UpgraderTreeBase baseTree;
	public UpgraderTreeLevel levelTree;
	public UpgraderTreeRepair repairTree;
	public UpgraderDetails _details;
	
	int scrapMetal;
	UIPanel _panel;

	public GameObject upgradePortContainer;

	List<UpgradeMenuItem> _cachedMenuItems = new List<UpgradeMenuItem>();

	Vector3 startPos;
	Vector3 hiddenPos;
	bool hidden = false;

	int currentPortIndex = 0;
	PortState.MinionTypeDetails currentDetails;
	bool firstUpdate = true;

	PortState[] portStates = new PortState[4];
	ColliderOutline2D[] portOutlines = new ColliderOutline2D[4];

	UpgraderCircle[] upgradeCircles = new UpgraderCircle[5];

	void Awake() {
		//Capture start/end positions for root container
		Vector3 sPos = upgraderContainer.transform.position;
		startPos = sPos;
		hiddenPos = new Vector3(sPos.x - upgraderContainer.collider.bounds.size.x, sPos.y, sPos.z);

		//Get the root panel and disable it so it doesn't count against draw calls
		_panel = GetComponent<UIPanel>();
		StartCoroutine(DoHide(0.0f));
	}

	public void HandleChangePort() {
		string name = UIButton.current.name;
		char num 	= name.ToCharArray()[name.Length - 1];
		int index 	= 0;
		bool wasInt = int.TryParse(num.ToString(), out index);
		if (wasInt) {
			index = index-1;
		}
		else {
			index = 3;
		}
		ChangePort(index, UIButton.current.transform.position);
	}

	void ChangePort(int index, Vector3 position) {
		if (hidden) return;

		currentPortIndex = index;
		OnPortLoadoutUpdate(portStates[index], true);
		UpdatePortHighlight();

		//if (portLine == null) {
		//	portLine = new Vectrosity.VectorLine("PortLine", new Vector3[]{transform.position, transform.position}, null, 10.0f); 
		//}

		Vector3 start = new Vector3(position.x, position.y, position.z + 300.0f);
		Vector3 end = new Vector3(position.x - 400, position.y, position.z + 300.0f);

		//portLine.points3 = new Vector3[] {start, end};
		//portLine.SetColor(Color.gray);
		//portLine.Draw3D();
	}

	public void ContinueToBattle() {
		Messenger.Broadcast("OnUpgradeFinish");
	}

	void SelectPowerup(UpgradeMenuItem item) {
		/*Port.PortState state = portStates[currentPortIndex];
		_details.SetDetails(state, state.selectedType, );
		currentDetails = item.GetDetails();
		
		UpgradeMenuItem[] rows = _scrollView.GetComponentsInChildren<UpgradeMenuItem>();
		for (int i = 0; i < rows.Length; i++) {
			UpgradeMenuItem it = rows[i];
			if (it == item) {
				it.SetHighlight(Color.blue);
			}
			else {
				it.SetHighlight(Color.white);
			}
		}
		//}*/
	}

	/**
	 * Updates the detail display
	 * and the tree display
	 */
	void SelectPowerup2(int selectedTypeIndex, int selectedLevelIndex, PortState state) {
		PortState port = state;
		if (state == null) {
			port = portStates[currentPortIndex];
		}

		currentDetails = state.GetTypeDetailsByIndex(selectedTypeIndex);
		_details.SetDetails(port, selectedTypeIndex, selectedLevelIndex);
		_currentTree.SetSelected(selectedTypeIndex, selectedLevelIndex);
	}

	public void SelectedPowerup() {
		UIButton b = UIButton.current;
		SelectPowerup(b.GetComponent<UpgradeMenuItem>());
	}

	public void SelectedPowerup2() {
		UIButton b = UIButton.current;
		UpgraderCircle circle = b.GetComponent<UpgraderCircle>();
		SelectPowerup2(circle.typeContext, circle.levelContext, portStates[currentPortIndex]);
	}

	PortState.MinionTypeDetails GetCurrentDetails(int portIndex) {
		PortState state = portStates[portIndex];

		return state.details[state.selectedType];
	}

	public void UpgradePort() {
		Messenger.Broadcast("UpdateShipComponent", currentPortIndex, currentDetails.index);
	}

	public void UpgradePort1() {
		UIButton b = UIButton.current;
		Messenger.Broadcast("UpdateShipComponent", 0, nameToIndex(b.name.ToLower()));
	}

	public void UpgradePort2() {
		UIButton b = UIButton.current;
		Messenger.Broadcast("UpdateShipComponent", 1, nameToIndex(b.name.ToLower()));
	}

	public void UpgradePort3() {
		UIButton b = UIButton.current;
		Messenger.Broadcast("UpdateShipComponent", 2, nameToIndex(b.name.ToLower()));
	}

	void UpdateScrapMetal(float metal) {
		scrapCount.text = metal.ToString();
		for (int i = 0; i < portStates.Length; i++) {
			if (portStates[i] != null) {
				portStates[i].scrapCount = metal;
			}
		}
	}

	void Update() {
		if (firstUpdate) {
			currentPortIndex = 0;
			ChangePort(currentPortIndex, Vector3.zero);
			firstUpdate = false;
		}
	}

	void OnPortInit(PortState port, ColliderOutline2D outline) {
		portStates[port.portIndex] = port;
		portOutlines[port.portIndex] = outline;
	}

	void OnPortLoadoutUpdate(PortState portState, bool updateUI) {
		portStates[portState.portIndex] = portState;

		if (updateUI && portState.details != null && portState.details.Length >= 1) {

			if (portState.portType == PortState.PortType.MOTHERSHIP) { //We're a single-ite
				baseTree.gameObject.SetActive(false);
				levelTree.gameObject.SetActive(false);
				repairTree.gameObject.SetActive(true);

				_currentTree = baseTree;
				
				PortState.MinionTypeDetails details = portState.GetCurrentTypeDetails();
				
				currentDetails = details;
				repairTree.SetState(portState);
				SelectPowerup2(portState.selectedType, details.state, portState);
			}
			else if (portState.selectedType == 0) { //Show the base
				baseTree.gameObject.SetActive(true);
				levelTree.gameObject.SetActive(false);
				repairTree.gameObject.SetActive(false);

				_currentTree = baseTree;

				PortState.MinionTypeDetails details = portState.GetCurrentTypeDetails();

				currentDetails = details;
				baseTree.SetState(portState);
				SelectPowerup2(portState.selectedType, details.state, portState);

			}
			else { //Show the level
				baseTree.gameObject.SetActive(false);
				levelTree.gameObject.SetActive(true);
				repairTree.gameObject.SetActive(false);

				_currentTree = levelTree;
				PortState.MinionTypeDetails details = portState.GetCurrentTypeDetails();

				currentDetails = details;
				levelTree.SetState(portState);
				SelectPowerup2(portState.selectedType, details.state, portState);
			}

			return;
		}
	}

	void UpdatePortHighlight() {
		for (int i = 0; i < portOutlines.Length; i++) {
			portOutlines[i].SetColor(i == currentPortIndex ? Color.green : Color.gray);
		}
	}

	UpgradeMenuItem GetCachedItem() {
		if (_cachedMenuItems.Count == 0)
			return null;

		UpgradeMenuItem item = _cachedMenuItems[0];
		_cachedMenuItems.RemoveAt(0);
		return item;
	}

	public void Show() {
		hidden = false;
		StartCoroutine(DoShow (1.0f));
	}

	public void Hide() {
		hidden = true;
		StartCoroutine(DoHide (1.0f));
	}

	IEnumerator DoShow(float d) {
		float duration = d, elapsed = 0.0f;
		_panel.enabled = true;

		for (int i = 0; i < portOutlines.Length; i++) {
			if (portOutlines[i] != null) {
				portOutlines[i].Show(true);
			}
		}

		while (elapsed < duration) {
			upgraderContainer.transform.position = Vector3.Lerp(hiddenPos, startPos, elapsed/duration);
			for (int i = 0; i < portOutlines.Length; i++) {
				if (portOutlines[i] != null) {
					Color c = portOutlines[i].GetColor();
					c.a = elapsed / duration;
					portOutlines[i].SetColor(c);
				}
			}

			elapsed += Time.deltaTime;
			yield return null;
		}

		upgraderContainer.transform.position = startPos;
	}

	IEnumerator DoHide(float d) {
		float duration = d, elapsed = 0.0f;
		while (elapsed < duration) {
			upgraderContainer.transform.position = Vector3.Lerp(startPos, hiddenPos, elapsed/duration);
			for (int i = 0; i < portOutlines.Length; i++) {
				if (portOutlines[i] != null) {
					Color c = portOutlines[i].GetColor();
					c.a = 1.0f - (elapsed/duration);
					portOutlines[i].SetColor(c);
				}
			}

			elapsed += Time.deltaTime;
			yield return null;
		}

		_panel.enabled = false;
		upgraderContainer.transform.position = hiddenPos;

		for (int i = 0; i < portOutlines.Length; i++) {
			if (portOutlines[i] != null) {
				portOutlines[i].Show(false);
			}
		}
	}

	void OnEnable() {
		Messenger.AddListener("onScrapMetalUpdate", new Callback<float>(UpdateScrapMetal));
		Messenger.AddListener("onPortLoadoutUpdate", new Callback<PortState, bool>(OnPortLoadoutUpdate));
		Messenger.AddListener("OnPortSelected", new Callback<int, Vector3>(ChangePort));
		Messenger.AddListener("OnPortInit", new Callback<PortState, ColliderOutline2D>(OnPortInit));
	}

	void OnDisable() {
		Messenger.RemoveListener("onScrapMetalUpdate", new Callback<float>(UpdateScrapMetal));
		Messenger.RemoveListener("onPortLoadoutUpdate", new Callback<PortState, bool>(OnPortLoadoutUpdate));
		Messenger.RemoveListener("OnPortSelected", new Callback<int, Vector3>(ChangePort));
	}

	int nameToIndex(string name) {
		if (name == "0normal") return (int)PortState.MinionTypes.NORMAL_MINION;
		if (name == "1speed") return (int)PortState.MinionTypes.SPEED_MINION;
		if (name == "2split") return (int)PortState.MinionTypes.SPLIT_MINION;
		if (name == "3seeker") return (int)PortState.MinionTypes.SEEKER_MINION;
		if (name == "42hit") return (int)PortState.MinionTypes.TWOHIT_MINION;
		Debug.Log("Not found: " + name);
		return -1;
	}




}
