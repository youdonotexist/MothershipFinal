using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Vectrosity;

public class LaserMissile : MonoBehaviour
{
	public float chargeDuration = 1.0f;
	float timeCharging = 0.0f;
	
	bool firing = false;
	public float fireDuration = 2.0f;
	float timeFiring = 0.0f;
	
	public float damagePerSecond = 50.0f;
	
	bool isCoolingDown = false;
	float cooldownDuration;
	float timeCoolingDown;
	GameObject _minionBlocker = null;
	
	VectorLine currentLine = null;
	public Material lineMaterial;
	public GameObject chargeAnimationPrefab;
	exSpriteAnimation _chargeAnimation;
	GameObject chargeAnimationParent;
	
	public GameObject chargeExplosionPrefab;
	
	GameObject chargeExplosion;
	exSpriteAnimation chargeExplosionAnimation;
	
	Texture2D[] animationTextures;
	
	public Texture2D[] msAnimationTextures;
	public Texture2D[] latestAnimationTextures;
	
	GameObject _mothership;

	void Awake() {
		if (MissionDetails.Instance.encounterType == "JUGGERNAUT") {
			animationTextures = msAnimationTextures;
		}
		else {
			animationTextures = latestAnimationTextures;
		}
	}

	void Start() {
		_mothership = GameObject.Find("Mothership");
	}
	
	void Update ()
	{
		if (firing) {
			if (timeCharging > chargeDuration) {
				if (!_chargeAnimation.IsPlaying("ChargeLaserFiring")) {
					_chargeAnimation.Play("ChargeLaserFiring");
				}
				Fire();		
			}
		
			timeCharging += Time.deltaTime;
		}
		else if (isCoolingDown) {
			if (timeCoolingDown > cooldownDuration) {
				isCoolingDown = false;	
			}
			timeCoolingDown += Time.deltaTime;
		}
	}
	
	public bool IsBusy() {
		return firing || isCoolingDown;	
	}
	
	public void StartFiring(float cd) {
		firing = true;
		timeCharging = 0.0f;
		timeFiring = 0.0f;
		
		cooldownDuration = cd;
		
		if (chargeAnimationParent == null) {
			chargeAnimationParent = (GameObject) GameObject.Instantiate(chargeAnimationPrefab, transform.position, chargeAnimationPrefab.transform.rotation);
			chargeAnimationParent.transform.parent = transform;
			chargeAnimationParent.transform.forward = new Vector3(1.0f, 0.0f, 0.0f);
		
			_chargeAnimation = chargeAnimationParent.GetComponentInChildren<exSpriteAnimation>();
		}
		else {
			chargeAnimationParent.SetActive(true);	
		}
		
		_chargeAnimation.Play(_chargeAnimation.animations[0].name);
	}
	
	public void StopFiring() {
		firing = false;	
		if (currentLine != null) {
			currentLine.points3 = new Vector3[] {transform.position, transform.position};
			currentLine.Draw3D();
		}
		
		if (_minionBlocker != null) {
			Damagable d =_minionBlocker.GetComponent<Damagable>();
			d.OnDamage(d.maxHealth, LayerMask.NameToLayer("HeroProjectile"));
		}
		
		chargeAnimationParent.SetActive(false);
		chargeExplosion.SetActive(false);
		
		isCoolingDown = true;
		timeCoolingDown = 0.0f;
	}
	
	void Fire() {
		if (currentLine == null) {
			currentLine = new VectorLine("LaserMissile", new Vector3[] {transform.position, transform.position}, lineMaterial, Screen.height);	
		}

		Debug.Log (Screen.height);
		currentLine.lineWidth = ((float)Screen.height) * 0.05f;
		
		if (_mothership == null) {
			StopFiring();
			return;
		}
		Vector3 direction = Vector3.Normalize(_mothership.transform.position - transform.position);
		float distance = Vector3.Distance(_mothership.transform.position, transform.position);

			
		RaycastHit hit;
		bool didHit = Physics.Raycast(transform.position, direction, out hit, distance, LayerMaskHelper.OnlyIncluding(LayerMask.NameToLayer("Mothership"), LayerMask.NameToLayer("Minion")));
		
		chargeAnimationParent.transform.forward = direction;
		
		if (didHit) {
			Damagable dam = hit.collider.GetComponent<Damagable>();
			if (dam != null) {
				MinionBaseVehicle minion = dam.GetComponent<MinionBaseVehicle>();
				if (minion != null) {
					//New Minion
					if (minion.gameObject != _minionBlocker) {
						//Destroy the old one
						if (_minionBlocker != null) { 
							Damagable d =_minionBlocker.GetComponent<Damagable>();
							d.OnDamage(d.maxHealth, LayerMask.NameToLayer("HeroProjectile"));
						}
					
						minion.StopFollowPath();
						minion.SetLaseredState();
						if (timeFiring > fireDuration) {
							dam.OnDamage(dam.maxHealth, LayerMask.NameToLayer("HeroProjectile"));
						}
						
						_minionBlocker = minion.gameObject;
					}
				}
				else {
					if (_minionBlocker != null) {
						Damagable d =_minionBlocker.GetComponent<Damagable>();
						d.OnDamage(100.0f, LayerMask.NameToLayer("HeroProjectile"));	
					}
					dam.OnDamage(damagePerSecond * Time.deltaTime, LayerMask.NameToLayer("HeroProjectile"));
				}
				
				if (chargeExplosion == null) {
					Vector3 point = hit.point;
					point.z -= 2.0f;
					chargeExplosion = (GameObject) GameObject.Instantiate(chargeExplosionPrefab, point, chargeExplosionPrefab.transform.rotation);	
					chargeExplosionAnimation = chargeExplosion.GetComponentInChildren<exSpriteAnimation>();
				}
				else {
					Vector3 point = hit.point;
					point.z -= 2.0f;
					chargeExplosion.transform.position = point;
					chargeExplosion.SetActive(true);	
				}
				
				if (_minionBlocker != null) {
					if (!chargeExplosionAnimation.IsPlaying("ChargeLaserSmallExplosionAnimation")) {
						chargeExplosionAnimation.Play("ChargeLaserSmallExplosionAnimation");
					}
				}
				else {
					if (!chargeExplosionAnimation.IsPlaying("ChargeLaserExplosionAnimation")) {
						chargeExplosionAnimation.Play("ChargeLaserExplosionAnimation");
					}	
				}
			}
			
			Vector3 pos = transform.position;
			pos.x += direction.x * 40.0f;
			pos.y += direction.y * 40.0f;
			
			currentLine.Resize(new Vector3[] {pos, hit.point});
			currentLine.Draw3D ();
		}

		//Animation is three seconds long

		int frame = Mathf.FloorToInt(timeFiring * 10.0f);
		frame = Mathf.Min(Mathf.Max((frame), 0), 6);
		lineMaterial.SetTexture("_MainTex", animationTextures[frame]);
		
		if (timeFiring > fireDuration) {
			StopFiring();
		}
		
		timeFiring += Time.deltaTime;
	}
	
	void OnDestroy() {
		VectorLine.Destroy(ref currentLine);
		if (chargeExplosion) {
			Destroy (chargeExplosion);	
		}
		
		if (_minionBlocker != null) {
			Damagable d =_minionBlocker.GetComponent<Damagable>();
			d.OnDamage(d.maxHealth, LayerMask.NameToLayer("HeroProjectile"));
		}
	}
}

