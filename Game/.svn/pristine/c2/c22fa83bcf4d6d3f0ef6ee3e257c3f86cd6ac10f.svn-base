using UnityEngine;
using System.Collections;
using Vectrosity;

public class Port : MonoBehaviour
{
	public GameObject[] shipPrefabs;
	public AudioClip _readyClip;
	
	AudioSource _audioSource;
	
	Camera _gameCamera;
	UISlider _progressBar;
	TimeKeeper _keeper;
	
	Path currentPath;
	
	Vector2 currentPositionScreen;
	Vector3 currentPositionWorld;
	
	VectorLine currentLine = null;
	public Material lineMaterial;
	
	float timeSinceLastMovement = 0.0f;
	
	public float timeBetweenDeploy = 3.0f;
	float lastDeploy = 0.0f;
	
	public bool minionReady = true;
	public bool portReady = true;
	
	public GameObject portWorld;
	public GameObject portedMinion = null;
	
	GameObject mothership = null;
	
	void Awake() {
		_gameCamera = Camera.mainCamera;
		
		GameObject progress = GameObject.Find(name + "Progress");
		_progressBar = progress != null ? progress.GetComponent<UISlider>() : null;
		_keeper = GameObject.Find("TimeKeeper").GetComponent<TimeKeeper>();
		
		mothership = GameObject.Find("Mothership");
		lastDeploy = timeBetweenDeploy;
		
		if (_audioSource == null) {
			_audioSource = gameObject.AddComponent<AudioSource>();
		}
	}
	
	void Start() {
		PortMinion();
	}
	
	void PortMinion() {
		GameObject prefab = shipPrefabs[0];
		portedMinion = (GameObject) Instantiate(prefab);//, portWorld.transform.position);
		portedMinion.transform.position = portWorld.transform.position;
		portedMinion.GetComponent<MinionVehicle>().parentPort = this;
		
		if (mothership != null)
			portedMinion.transform.parent = mothership.transform;
	}
	
	void OnDrag (Vector2 delta) {
		if (currentPath) {
			Vector2 currentTouch = UICamera.lastTouchPosition;
			if (Vector2.Distance(currentTouch, currentPositionScreen) > 40.0f) {
				currentPositionScreen = UICamera.lastTouchPosition;
				Vector3 world = _gameCamera.ScreenToWorldPoint(new Vector3(currentPositionScreen.x, currentPositionScreen.y, _gameCamera.transform.position.z));	
				world.z = -0.01f;
				
				currentPath.AddPoint(new TimestampPoint(world, timeSinceLastMovement));
				timeSinceLastMovement = 0.0f;
				currentPositionWorld = world;
				
				if (currentLine == null) {
					currentLine = new VectorLine("Test", currentPath.GetPoints(), lineMaterial, 10.0f, LineType.Continuous);
				}
				
				currentLine.Resize(currentPath.GetPoints());
				currentLine.Draw3D ();
			}
		}
	}
	
	void OnPress(bool pressed) {
		if (pressed == true) {
			if (portReady && minionReady) {
				Time.timeScale = 0.01f;
				currentPath = gameObject.AddComponent<Path>();
			
				currentPositionScreen = UICamera.lastTouchPosition;
				currentPositionWorld = _gameCamera.ScreenToWorldPoint(new Vector3(currentPositionScreen.x, currentPositionScreen.y, _gameCamera.transform.position.z));
				currentPositionWorld.z = -0.01f;
				
				currentPath.AddPoint(new TimestampPoint(currentPositionWorld, 0.0f));
				
				timeSinceLastMovement = 0.0f;
				lastDeploy = 0.0f;
			}
			
		}
		else {
			if (shipPrefabs != null && shipPrefabs.Length > 0) {
				if (currentPath != null) {
					if (currentPath.points.Count > 1) {
						MinionVehicle minion = portedMinion.GetComponent<MinionVehicle>();
						minion.parentPort = this;
						minion.SetPath(currentPath);
						minionReady = false;
						
						minion.transform.forward = Vector3.right * -1.0f;
						
						portedMinion = null;
					}
					else {
						lastDeploy = timeBetweenDeploy;	
					}
					
					Destroy (currentPath);
					VectorLine.Destroy(ref currentLine);
					currentLine = null;
					currentPath = null;
				}
			}
			
			Time.timeScale = 1.0f;
		}
	}
	
	void BuildWorldPoint() {
		
	}
				
	void Update() {
		
		//if (UICamera.currentTouch == null)
		//	Time.timeScale = 1.0f;
		
		timeSinceLastMovement += _keeper.AnimationTime();
		
		if (minionReady) {
			lastDeploy += Time.deltaTime;
			if (lastDeploy >= timeBetweenDeploy) {
				if (portReady == false) {
					_audioSource.PlayOneShot(_readyClip);
				}
				if (portedMinion == null)
					PortMinion();
				portReady = true;
			}
			else {
				portReady = false;	
			}
		}
		
		if (_progressBar != null)
			_progressBar.sliderValue = lastDeploy/timeBetweenDeploy;	
	}
	
	public void MinionDestroyed() {
		minionReady = true;
	}
	
	void OnDisable() {
		if (portedMinion != null) {
			portedMinion.collider.enabled = false;
		}
	}
	
	void OnEnable() {
		if (portedMinion != null)
			portedMinion.collider.enabled = true;
	}
}

