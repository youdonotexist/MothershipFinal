using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using MiniJSON;

public class MissionManager : MonoBehaviour {
	public static string BaseUrl = "http://mothership.mike-daly.com"; 
	//public static string BaseUrl = "http://localhost:9002"; 

	public GameObject basicHeroPrefab;
	public GameObject juggernautHeroPrefab;
	public GameObject scientistHeroPrefab;
	
	string heroType = "BASIC";
	string currentEncounterId = "";
	
	public GameObject healthPrefab;
	public GameObject mothershipExplosionPrefab;
	public GameObject mothershipWreckagePrefab;
	
	public GameObject offscreen;
	public GameObject offscreenWin;
	public GameObject offscreenLose;
	public GameObject healthSpawn;
	
	public AudioClip music1prefab;
	public AudioClip music2prefab;
	public AudioClip winMusic;
	public AudioClip loseMusic;
	
	public Texture2D defaultPortrait;

	public AsteroidField[] asteroids;
	
	UILabel _deathScreen;
	UIButton _deathButton;
	UIButton _mainMenuButton;
	UISprite _mainMenuBackground;
	GameObject _volumeContainer;
	
	GameObject currentHeroObject;
	MothershipVehicle _mothership;
	
	HeroAIManager _manager;
	public int currentHero = 0;
	
	HeroConfig[] heros;
	
	bool quitting = false;
	
	float pausedTimeScale = 1.0f;
	
	public int MaxPathNodes = 18;
	
	public int HeroesLeft() {
		return heros.Length - currentHero;	
	}

	string uniqueishId = "";
	
	void Download(string encId) {
		currentEncounterId = encId;
		
		Debug.Log (MissionManager.BaseUrl + "/encounter/" + encId);
		CI.Request encounterDetailsReq = new CI.Request();
		encounterDetailsReq.Send(MissionManager.BaseUrl + "/encounter/" + encId, "get", true,  (request) => {
			
			if (request.requestState.isDone) {
				IDictionary search = (IDictionary) Json.Deserialize(encounterDetailsReq.requestState.responseData.ToString());  
			
				if (search == null) {
					Debug.Log ("Retrying..");
					Download (encId);
				}
				else {
			   		IList heroSet = (IList) search["heroes"];
					heros = new HeroConfig[heroSet.Count];
					uniqueishId = System.Guid.NewGuid().ToString();
					
					for (int i = 0; i < heroSet.Count; i++) {
						IDictionary hero = (IDictionary) heroSet[i];
						string name 	= hero["name"].ToString();
						
						IList directiveList = (IList) hero["directives"];
						string[] directives = new string[directiveList.Count];
						for (int j = 0; j < directiveList.Count; j++) {
							IDictionary directive = (IDictionary) directiveList[j];
							object o = directive["waitAfter"];
							
							string action =  directive["action"].ToString();;
							string waitAfter = directive["waitAfter"].ToString();
							directives[j] = action + " | " + waitAfter.ToString();
						}
						
						heros[i] = new HeroConfig(directives, hero, name);
					}
					SpawnHero ();
					StartCoroutine(metrics());
				}	
			}
		});
	}
	
	void BuildLevels () {
		TextAsset asset = (TextAsset) Resources.Load("HeroData/JuggernautHero");
		IDictionary search = (IDictionary) Json.Deserialize(asset.text);    
   		IList heroSet = (IList) search["heroSet"];
		
		heros = new HeroConfig[heroSet.Count];
		
		for (int i = 0; i < heroSet.Count; i++) {
			IDictionary hero = (IDictionary) heroSet[i];
			string name 	= hero["name"].ToString();
			
			IList directiveList = (IList) hero["directives"];
			string[] directives = new string[directiveList.Count];
			for (int j = 0; j < directiveList.Count; j++) {
				directives[j] = directiveList[j].ToString();	
			}
			
			heros[i] = new HeroConfig(directives, hero, name);
		}	
	}
	
	void OnApplicationQuit() {
		quitting = true;	
	}
	
	void Awake() {
		Application.targetFrameRate = 60;
		
		_manager = GameObject.Find("_MinesAndShields").GetComponent<HeroAIManager>();	
		_deathScreen = GameObject.Find("OutcomeLabel").GetComponent<UILabel>();
		_deathButton = GameObject.Find("RetryButton").GetComponent<UIButton>();
		_mainMenuButton = GameObject.Find("Menu").GetComponent<UIButton>();
		_mainMenuBackground = GameObject.Find("MenuBackground").GetComponent<UISprite>();
		_volumeContainer = GameObject.Find ("VolumeContainer");
		
		_mothership = GameObject.Find("Mothership").GetComponent<MothershipVehicle>();

		_deathScreen.gameObject.SetActive(false);
		_deathButton.gameObject.SetActive(false);
		_mainMenuButton.gameObject.SetActive(false);
		_mainMenuBackground.gameObject.SetActive(false);
		_volumeContainer.SetActive (false);
	}
	
	void Start() {
		Random.seed = (int) Time.time;

		string encId = MissionDetails.Instance.GetEncounterId();
		if (encId != null && encId.Length > 0) {
			Download(encId);
		}
		else {
			Application.LoadLevel(LevelManager.Instance.MainMenuLevelName());	
		}
	}
	
	public void OnHeroDie(Vector3 pos) {
		if (quitting == false) {
			StartCoroutine(SpawnHealthAndWait(pos));
		}
	}
	
	public void OnMothershipDie() {
		YouLose();
	}
	
	public void RetryBattle() {
		Time.timeScale = 1.0f;
		Application.LoadLevel(LevelManager.Instance.EncounterLevelName());
	}
	
	IEnumerator SpawnHealthAndWait(Vector3 pos) {
		int N = Random.Range(1, 5);
		
		SphereCollider sc = (SphereCollider) healthSpawn.collider;
		
		
		exSprite[] sprites = new exSprite[N];
		Vector3[] randPos = new Vector3[N];
		Vector3 startPos = new Vector3(pos.x, pos.y, 0.0f);
		
		for (int i = 0; i < N; i++) {
			Vector2 rand = Random.insideUnitCircle * sc.radius;
			randPos[i] = new Vector3(rand.x, rand.y, 0.0f);

			GameObject instance = (GameObject) Instantiate(healthPrefab, startPos, Quaternion.identity);
			sprites[i] = instance.GetComponent<exSprite>();
		}

		float move = 0.6f, moveElapse = 0.0f;
		while (moveElapse < move) {
			for(int i = 0; i < sprites.Length; i++) {
				exSprite s = sprites[i];
				if (s != null) {
					s.gameObject.transform.position = Vector3.Lerp(startPos, randPos[i], moveElapse/move);
				}
			}

			moveElapse += Time.deltaTime;
			yield return null;
		}
		
		float aliveTime = 4.0f;
		float elapsed = 0.0f;
		while (elapsed < aliveTime) {
			
			foreach(exSprite s in sprites) {
				if (s != null) {
					Color c = s.color;
					c.a = (1.0f - (elapsed/aliveTime));
					s.color = c;
				}
			}
			elapsed += Time.deltaTime;
			yield return null;
		}
		
		foreach(exSprite s in sprites) {
			if (s != null) {
				Destroy (s.gameObject);
			}
		}
		
		while (_manager.GetMissileCount() > 0) {
			yield return null;	
		}
		
		SpawnHero ();
	}
	
	public GameObject PrefabForHeroType() {
		if (heroType == "BASIC") {
			return basicHeroPrefab;	
		}
		else if (heroType == "JUGGERNAUT") {
			return juggernautHeroPrefab;	
		}
		else if (heroType == "SCIENTIST") {
			return scientistHeroPrefab;
		}
		
		return null;
	}

	IEnumerator metrics() {
		int lastHeroId = 1;
		float lastTime = Time.timeSinceLevelLoad;
		float lastHealth = _mothership.GetComponent<Damagable>().currentHealth;;
		bool stop = false;
		do {
			stop = GameState.Instance._gameState == GameState.GAMESTATE.GAMEOVER || GameState.Instance._gameState == GameState.GAMESTATE.WIN;

			if (lastHeroId != currentHero) {

				Debug.Log (lastHeroId.ToString() + " " + currentHero.ToString());

				//We changed heroes
				//If we're != -1, collect the state
				float currHealth = _mothership.GetComponent<Damagable>().currentHealth;;

				//The update the state with the next hero

				if (lastHeroId != -1) { //Don't send a request the first time
					Hashtable data = new Hashtable();
					data["timestamp"] = uniqueishId;
					data["battle_length"] = (Time.timeSinceLevelLoad - lastTime);
					data["damage_taken"] = lastHealth - currHealth;
					data["death"] = GameState.Instance._gameState == GameState.GAMESTATE.GAMEOVER;
					data["hero_name"] = heros[lastHeroId].getString("name");
					data["battle_type"] = heros[lastHeroId].getString("hero_type_id");
					data["encounter_id"] = currentEncounterId; 
					data["metric_type"] = "encounter";

					new CI.Request().POST(MissionManager.BaseUrl + "/metrics", data);

					Debug.Log("posted!");
				}

				lastTime = Time.timeSinceLevelLoad;
				lastHealth = currHealth;
				lastHeroId = currentHero;
			}

			yield return null;

		} while (!stop);
	}
	
	void SpawnHero() {
		/**
		 * METRICS
		 */

		if (currentHero < heros.Length) {
			HeroConfig config = heros[currentHero];
			heroType = config.getString("hero_type_id");
			currentHeroObject = (GameObject) Instantiate(PrefabForHeroType());
			currentHeroObject.transform.position = offscreen.transform.position;
			
			HeroVehicle hero = currentHeroObject.GetComponent<HeroVehicle>();
			
			hero._config = config;
			hero.name = config.heroName;
			GamePlayHUD.Instance().UpdateSprite(heroType); 
			
			StartCoroutine(DriveOnScreen(hero));
			StartCoroutine(LoadHeroImage(hero));
			
			currentHero++;
			
			int index = config.getInt("debris_deploy_index");
			if (index == 1) { //TODO: Fix this so we don't look for 1
				index = (int) (( (float)heros.Length ) * 0.5f);
			}

			bool useAsteroids = hero._config.getBool("asteroidBattle");
			foreach (AsteroidField ast in asteroids) {
				ast.deployDebris = useAsteroids;
			}
		}
		else if (_mothership != null) {
			YouWin();
		}
	}
	
	void postScore() {
		long score = long.Parse(GamePlayHUD.Instance()._heroScoreLabel.text);
		Hashtable data = new Hashtable();
		data.Add( "score", score.ToString() );
		
		StartCoroutine(PostScoreAsync(data));
	}
	
	IEnumerator PostScoreAsync(Hashtable data) {
		CI.Request theRequest = new CI.Request();	
		
		Debug.Log(MissionManager.BaseUrl + "/score/" + currentEncounterId);
		theRequest.POST(MissionManager.BaseUrl + "/score/" + currentEncounterId, data);
		
		while (!theRequest.requestState.isDone) { yield return null; }
		
		string stringResult = theRequest.requestState.responseData.ToString();
		Hashtable result = (Hashtable) JSON.JsonDecode(stringResult);
		
	    if ( result == null )
	    {
	        Debug.LogWarning( "Could not parse JSON response!" );

		}
		else {
			
			string successProperty = (string) result["status"];
			if (successProperty == "new_low_score") {
				GamePlayHUD.Instance().ShowNewLowScoreMessage();	
			}
		}
	}
			
	IEnumerator LoadHeroImage(HeroVehicle hero) {
		string url = hero._config.getString("photo_url");
		if (url != null) {
			WWW www = new WWW(url);
	        yield return www;

			GamePlayHUD.Instance().SetPortraitTexture(www.texture);
		}
		else {
			GamePlayHUD.Instance().SetPortraitTexture(null);
		}
	}
	
	void YouLose() {
		StartCoroutine(MothershipLose());
	}
	
	public void PauseMenu(bool open) {
		if (open) {
			pausedTimeScale = Time.timeScale;
			Time.timeScale = 0.0f;
			GameState.Instance.SetPaused(true);
			
			_deathScreen.gameObject.SetActive(true);
			_deathButton.gameObject.SetActive(true);
			_mainMenuButton.gameObject.SetActive(true);
			_mainMenuBackground.gameObject.SetActive(true);
			_volumeContainer.SetActive(true);

			_deathScreen.text = "Paused";// (and it's time to enjoy interbreeding between species!) ";
			_deathButton.GetComponentInChildren<UILabel>().text = "Restart";
			StartCoroutine("FadeInMenuBackground", 0.2f);
		}
		else {
			Time.timeScale = pausedTimeScale;
			GameState.Instance.SetPaused(false);
			
			_deathScreen.gameObject.SetActive(false);
			_deathButton.gameObject.gameObject.SetActive(false);
			_mainMenuButton.gameObject.gameObject.SetActive(false);
			_mainMenuBackground.gameObject.SetActive(false);
			_volumeContainer.SetActive(false);
			StopCoroutine("FadeInMenuBackground");			
		}
	}
	
	IEnumerator FadeInMenuBackground(float duration) {
		float elapsed = 0.0f;
		Color currentColor = _mainMenuBackground.color;
		currentColor.a = 0.0f;
		_mainMenuBackground.color = currentColor;
		
		while (elapsed < duration) {
			Color c = _mainMenuBackground.color;
			c.a = Mathf.Lerp(0.0f, 0.7f, elapsed/duration);
			_mainMenuBackground.color = c;
			
			elapsed += TimeKeeper.Instance().AnimationTime();
			yield return null;
		}
	}
	
	void YouWin() {
		_deathScreen.gameObject.SetActive(true);
		_deathButton.gameObject.SetActive(true);
		_mainMenuButton.gameObject.SetActive(true);
		_deathScreen.text = "You Win";// (and it's time to enjoy interbreeding between species!) ";
		_deathButton.GetComponentInChildren<UILabel>().text = "Play Again";
		
		GameState.Instance.SetOnWin();
		
		long idx = MissionDetails.Instance.encounterIndex;
		if (idx > -1) {
			GameSaver.SetSaveState(idx + 1, true);	
		}

		MasterAudio.TriggerPlaylistClip(winMusic.name);
		StartCoroutine(MothershipWin());
		
		postScore();
	}
	
	IEnumerator ExplodeMothership() {
		float explodeDuration = 4.0f;
		float elapsed = 0.0f;
		float explosionCount = 20;
		float completedExplosions = 0;
		float metric = explodeDuration/explosionCount;
		
		while (elapsed < explodeDuration) {
			if (elapsed > metric * completedExplosions) {
				Vector3 worldPt = new Vector3(Random.Range(_mothership.collider.bounds.min.x, _mothership.collider.bounds.max.x - 30.0f),
												Random.Range(_mothership.collider.bounds.min.y, _mothership.collider.bounds.max.y),
												LayerManager._3_5);
												
				Instantiate(mothershipExplosionPrefab, worldPt, mothershipExplosionPrefab.transform.rotation);
				completedExplosions++;
			}
			
			elapsed += Time.deltaTime;
			yield return null;
		}
	}
	
	
	IEnumerator MothershipLose() {
		CurtainHelper _curtainHelper = GameObject.Find("UI Root").GetComponent<CurtainHelper>();
		
		//STop the current hero
		HeroVehicle veh = currentHeroObject.GetComponent<HeroVehicle>();
		veh.OnHeroWin();
		veh.ClearDirectives();
		
		//Animate three explosions on the Mothership
		yield return StartCoroutine(ExplodeMothership());
		
		//Fade the screen to white
		//yield return StartCoroutine(CameraFade.StartAlphaFadeAsync(Color.white, false, 3.0f));
		yield return StartCoroutine(_curtainHelper.AnimateCurtainRoutine(false, Color.clear, Color.white, 3.0f, null));
		
		//Swap out good for destroyed mothership
		Instantiate(mothershipWreckagePrefab, _mothership.transform.position, mothershipWreckagePrefab.transform.rotation);
		Destroy (_mothership.gameObject);
		
		//Continue
		//yield return StartCoroutine(CameraFade.StartAlphaFadeAsync(Color.white, true, 3.0f));
		yield return StartCoroutine(_curtainHelper.AnimateCurtainRoutine(true, Color.white, Color.clear, 3.0f, null));
		
		
		_deathScreen.gameObject.SetActive(true);
		_deathButton.gameObject.SetActive(true);
		_mainMenuButton.gameObject.SetActive(true);
		_deathScreen.text = "You Lose";// (and your race is pretty much doomed)";
		
		GameState.Instance.SetOnLose();
		
		if (currentHeroObject != null) {
			StartCoroutine(CurrentHeroWin());	
		}
		
		gameObject.audio.clip = loseMusic;
		gameObject.audio.Play ();
		
		float lastDeploy = 0.0f;
		float waitToDeploy = 2.3f;
		
		for (int i = currentHero + 1; i < heros.Length; i++) {
			while (lastDeploy < waitToDeploy) {
				lastDeploy += Time.deltaTime;
				yield return null;
			}	
			
			lastDeploy = 0.0f;
			StartCoroutine(SpawnHeroWin(i));
		}
	}
	
	IEnumerator CurrentHeroWin() {
		Vector3 start = currentHeroObject.transform.position;
		Vector3 end = offscreenLose.transform.position;
		
		HeroVehicle veh = currentHeroObject.GetComponent<HeroVehicle>();
		veh.OnHeroWin();
		veh.ClearDirectives();
		
		float duration = 3.0f;
		float elapsed = 0.0f;
		
		while (elapsed < duration) {
			currentHeroObject.transform.position = Vector3.Lerp (start,end, elapsed/duration);
			elapsed += Time.deltaTime;
			yield return null;
		}
		
		_manager.SetVehicle(null);
	}
	
	IEnumerator SpawnHeroWin(int index) {
		if (index < heros.Length) {
			HeroConfig config = heros[index];
			GameObject go = (GameObject) Instantiate(PrefabForHeroType());
			go.transform.position = offscreen.transform.position;
			HeroVehicle hero = go.GetComponent<HeroVehicle>();
			
			hero.name = config.heroName;
			
			Vector3 start = go.transform.position;
			Vector3 end = offscreenLose.transform.position;
			
			float duration = 3.0f;
			float elapsed = 0.0f;
			
			while (elapsed < duration) {
				go.transform.position = Vector3.Lerp (start,end, elapsed/duration);
				elapsed += Time.deltaTime;
				yield return null;
			} 
		}
	}
	
	IEnumerator MothershipWin() {
		GameObject mothership = GameObject.Find("Mothership");	
		MothershipVehicle veh = mothership.GetComponent<MothershipVehicle>();
		veh.EnablePorts(false, MothershipVehicle.PortState.OFF);
		
		Deployable[] leftOvers = (Deployable[]) GameObject.FindObjectsOfType(typeof(Deployable));
		foreach (Deployable left in leftOvers) {
			Destroy (left.gameObject);	
		}
		
		Vector3 end = offscreenWin.transform.position;
		Vector3 start = mothership.transform.position;
		float moveTime = 6.0f;
		float currentTime = 0.0f;
		
		while (currentTime < moveTime) {
			mothership.transform.position = Vector3.Lerp (start, end, currentTime/moveTime);
			currentTime += Time.deltaTime;
			yield return null;	
		}
	}
	
	IEnumerator DriveOnScreen(HeroVehicle hero) {
		float duration = 4.0f;
		float currentDuration = 0.0f;
		Vector3 start = offscreen.transform.position;
		Vector3 end = _manager.MiddleHeroNode().transform.position;

		MasterAudio.ChangePlaylistByName ("BattleMusic");
		MasterAudio.PlaySound (hero._spawnClip.name);
		
		_mothership.EnablePorts(false, MothershipVehicle.PortState.WAITING);
		
		while (currentDuration < duration) {
			if (hero != null) {
				hero.rigidbody.MovePosition(Vector3.Lerp(start, end, currentDuration/duration));
			}
			currentDuration += Time.deltaTime;
			
			yield return null;
		}

		MasterAudio.PauseSoundGroup ("Hero Movement");
		_mothership.EnablePorts(true, MothershipVehicle.PortState.ON);
		
		_manager.SetVehicle(hero);
		if (currentHero-1 == 0) {
			if (MasterAudio.CurrentPlaylistClipName != music1prefab.name)
				MasterAudio.TriggerPlaylistClip(music1prefab.name);
		}
		else if (currentHero/heros.Length > 0.60f) {
			if (MasterAudio.CurrentPlaylistClipName != music2prefab.name)
				MasterAudio.TriggerPlaylistClip(music2prefab.name);
		}
		
		if (hero != null) {
			hero.rigidbody.MovePosition(end);
			hero.OnHeroReady();
		}
	}
}
